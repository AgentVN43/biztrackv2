/**
 * Test API s·ªï c√°i giao d·ªãch kh√°ch h√†ng
 * 
 * S·ª≠ d·ª•ng: node test_transaction_ledger.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api'; // Thay ƒë·ªïi port n·∫øu c·∫ßn
const CUSTOMER_ID = 'your-customer-id'; // Thay ƒë·ªïi ID kh√°ch h√†ng th·ª±c t·∫ø

async function testTransactionLedger() {
  try {
    console.log('üß™ Testing Transaction Ledger API...');
    console.log(`üìã Customer ID: ${CUSTOMER_ID}`);
    
    const response = await axios.get(`${BASE_URL}/customers/${CUSTOMER_ID}/transaction-ledger`);
    
    console.log('‚úÖ API Response:');
    console.log('Status:', response.status);
    console.log('Success:', response.data.success);
    console.log('Message:', response.data.message);
    
    if (response.data.success && response.data.data) {
      console.log('\nüìä Transaction Ledger Data:');
      console.log('Total transactions:', response.data.data.length);
      
      // Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng
      console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
      console.log('‚îÇ M√£ giao d·ªãch    ‚îÇ Ng√†y giao d·ªãch  ‚îÇ Lo·∫°i            ‚îÇ Gi√° tr·ªã         ‚îÇ D∆∞ n·ª£           ‚îÇ');
      console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
      
      response.data.data.forEach((transaction, index) => {
        const code = (transaction.ma_giao_dich || '').padEnd(15);
        const date = (transaction.ngay_giao_dich || '').padEnd(15);
        const type = (transaction.loai || '').padEnd(15);
        const amount = (transaction.gia_tri || '').padEnd(15);
        const balance = (transaction.du_no || '').padEnd(15);
        
        console.log(`‚îÇ ${code} ‚îÇ ${date} ‚îÇ ${type} ‚îÇ ${amount} ‚îÇ ${balance} ‚îÇ`);
        
        if (index < response.data.data.length - 1) {
          console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        }
      });
      
      console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
      
      // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
      console.log('\nüìã Detailed Information:');
      response.data.data.forEach((transaction, index) => {
        console.log(`\n${index + 1}. ${transaction.ma_giao_dich}`);
        console.log(`   M√¥ t·∫£: ${transaction.mo_ta}`);
        console.log(`   Order ID: ${transaction.order_id || 'N/A'}`);
        console.log(`   Invoice ID: ${transaction.invoice_id || 'N/A'}`);
        console.log(`   Transaction ID: ${transaction.transaction_id || 'N/A'}`);
        console.log(`   Status: ${transaction.status || 'N/A'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error testing Transaction Ledger API:');
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    } else {
      console.error('Error:', error.message);
    }
  }
}

// Ch·∫°y test
testTransactionLedger(); 