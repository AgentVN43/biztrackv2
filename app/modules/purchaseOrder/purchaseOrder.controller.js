// const service = require("./purchaseOrder.service");
// const paymentService = require("../payments/payments.service"); // Import payment service
// const transactionService = require("../transactions/transaction.service");

// exports.create = (req, res, next) => {
//   // service.createPurchaseOrder(req.body, (err, result) => {
//   //   if (err) return next(err);

//   //   // T·ª± ƒë·ªông t·∫°o phi·∫øu chi khi Purchase Order ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
//   //   paymentService.createPaymentOnPOCreation(
//   //     result.po_id,
//   //     result.total_amount || 0,
//   //     (paymentErr, payment) => {
//   //       // Truy·ªÅn callback v√†o ƒë√¢y
//   //       if (paymentErr) {
//   //         // X·ª≠ l√Ω l·ªói khi t·∫°o phi·∫øu chi
//   //         console.error("Error creating payment:", paymentErr);
//   //         // *Quan tr·ªçng*:  B·∫°n C·∫¶N g·ªçi res.status v√† res.json ·ªü ƒê√ÇY ƒë·ªÉ k·∫øt th√∫c request
//   //         res.status(201).json({
//   //           // Ho·∫∑c 500, t√πy logic
//   //           success: true, // C√≥ th·ªÉ l√† false t√πy v√†o vi·ªác b·∫°n c√≥ mu·ªën b√°o l·ªói kh√¥ng
//   //           data: { purchaseOrder: result, payment: null },
//   //           message: "Purchase Order created, but Payment creation failed.",
//   //         });
//   //       } else {
//   //         // N·∫øu t·∫°o phi·∫øu chi th√†nh c√¥ng, tr·∫£ v·ªÅ c·∫£ th√¥ng tin PO v√† Payment
//   //         res
//   //           .status(201)
//   //           .json({ success: true, data: { purchaseOrder: result, payment } });
//   //       }
//   //     }
//   //   );

//   // });
//   service.createPurchaseOrder(req.body, (err, result) => {
//     if (err) return next(err);

//     paymentService.createPaymentOnPOCreation(
//       result.po_id,
//       result.total_amount || 0,
//       (paymentErr, payment) => {
//         if (paymentErr) {
//           console.error("Error creating payment:", paymentErr);

//           // C√≥ th·ªÉ ch·ªçn kh√¥ng d·ª´ng flow m√† v·∫´n tr·∫£ v·ªÅ PO + b√°o l·ªói ·ªü payment
//           return res.status(201).json({
//             success: true,
//             data: { purchaseOrder: result, payment: null },
//             message: "Purchase Order created, but Payment creation failed.",
//           });
//         }

//         // N·∫øu t·∫°o payment th√†nh c√¥ng, th√¨ ti·∫øp t·ª•c t·∫°o transaction
//         const transactionData = {
//           transaction_code: `TX-P-${payment.payment_code}`,
//           transaction_type: "expense",
//           amount: payment.amount,
//           description: `Chi cho ƒë∆°n mua h√†ng ${result.po_id}`,
//           category: "purchase_payment",
//           payment_method: payment.payment_method,
//           source_type: "payment",
//           source_id: payment.payment_id,
//         };

//         transactionService.createTransaction(
//           transactionData,
//           (transactionErr, transaction) => {
//             if (transactionErr) {
//               console.error(
//                 "L·ªói khi t·∫°o transaction t·ª´ payment:",
//                 transactionErr.message
//               );
//               // V·∫´n ti·∫øp t·ª•c tr·∫£ k·∫øt qu·∫£, ch·ªâ log l·ªói
//             }

//             return res.status(201).json({
//               success: true,
//               data: {
//                 purchaseOrder: result,
//                 payment,
//                 transaction,
//               },
//             });
//           }
//         );
//       }
//     );
//   });
// };

// exports.getById = (req, res, next) => {
//   service.getPurchaseOrderById(req.params.id, (err, result) => {
//     if (err) return next(err);
//     if (!result)
//       return res.status(404).json({ success: false, message: "Not found" });
//     res.json({ success: true, data: result });
//   });
// };

// exports.getWithDetailsById = (req, res, next) => {
//   service.getPurchaseOrderDetailsById(req.params.id, (err, result) => {
//     if (err) return next(err);
//     if (!result)
//       return res.status(404).json({ success: false, message: "Not found" });
//     res.json({ success: true, data: result });
//   });
// };

// exports.remove = (req, res, next) => {
//   service.deletePurchaseOrder(req.params.id, (err) => {
//     if (err) return next(err);
//     res.json({ success: true, message: "Deleted" });
//   });
// };

// exports.postOrder = (req, res, next) => {
//   service.confirmPurchaseOrder(req.params.id, (err, result) => {
//     if (err) return next(err);
//     res.json({ success: true, data: result });
//   });
// };

// exports.update = (req, res, next) => {
//   service.updatePurchaseOrder(req.params.id, req.body, (err, result) => {
//     if (err) return next(err);
//     if (!result)
//       return res.status(404).json({ success: false, message: "Not found" });
//     res.json({ success: true, data: result });
//   });
// };

// exports.updatePOWithDetails = (req, res, next) => {
//   const poId = req.params.id;
//   const { supplier_name, note, status, details } = req.body;

//   service.updatePOWithDetails(
//     poId,
//     { supplier_name, note, status },
//     details,
//     (err, result) => {
//       if (err) return next(err);
//       res.json({ success: true, data: result });
//     }
//   );
// };
const service = require("./purchaseOrder.service");
const TransactionService = require("../transactions/transaction.service");
const InvoiceService = require("../invoice/invoice.service"); // ‚úÖ Import InvoiceService

exports.create = async (req, res, next) => {
  // ‚úÖ Chuy·ªÉn h√†m th√†nh async
  try {
    // G·ªçi service.createPurchaseOrder v√† await k·∫øt qu·∫£
    // H√†m createPurchaseOrder trong service c·∫ßn tr·∫£ v·ªÅ po_id, total_amount, final_amount, order_date, supplier_id, payment_method
    const purchaseOrderResult = await service.createPurchaseOrder(req.body);

    // --- L∆ØU √ù QUAN TR·ªåNG: Theo quy tr√¨nh nghi·ªáp v·ª•, Invoice v√† Transaction th∆∞·ªùng ƒë∆∞·ª£c t·∫°o khi PO ƒë∆∞·ª£c PH√ä DUY·ªÜT/NH·∫¨P KHO,
    // ch·ª© kh√¥ng ph·∫£i ngay khi PO ƒë∆∞·ª£c t·∫°o nh√°p. Tuy nhi√™n, theo y√™u c·∫ßu hi·ªán t·∫°i, ch√∫ng ta s·∫Ω t·∫°o ch√∫ng ·ªü ƒë√¢y. ---

    // ‚úÖ T·∫°o Invoice cho ƒë∆°n mua h√†ng n√†y
    const invoiceData = {
      invoice_code: `INV-PO-${Date.now()}`, // T·ª± ƒë·ªông sinh m√£ invoice cho PO
      invoice_type: "purchase_invoice",
      order_id: purchaseOrderResult.po_id, // Kh√¥ng c√≥ order_id cho h√≥a ƒë∆°n mua h√†ng
      // purchase_order_id: purchaseOrderResult.po_id, // Li√™n k·∫øt v·ªõi PO
      supplier_id: purchaseOrderResult.supplier_id, // L·∫•y t·ª´ PO ƒë√£ t·∫°o
      total_amount: purchaseOrderResult.total_amount,
      tax_amount: 0, // C·∫ßn t√≠nh to√°n n·∫øu c√≥ thu·∫ø
      discount_amount: purchaseOrderResult.discount_amount || 0,
      final_amount: purchaseOrderResult.final_amount,
      issued_date: purchaseOrderResult.order_date || new Date(), // S·ª≠ d·ª•ng ng√†y PO ho·∫∑c ng√†y hi·ªán t·∫°i
      due_date: purchaseOrderResult.order_date || new Date(), // Ho·∫∑c m·ªôt ng√†y c·ª• th·ªÉ
      status: "pending", // Tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa h√≥a ƒë∆°n mua h√†ng
      note: `H√≥a ƒë∆°n mua h√†ng t·ª± ƒë·ªông ph√°t sinh t·ª´ PO ${purchaseOrderResult.po_id}`,
    };

    // InvoiceService.create c·∫ßn ƒë∆∞·ª£c refactor ƒë·ªÉ tr·∫£ v·ªÅ Promise
    const invoice = await InvoiceService.create(invoiceData);
    console.log(
      "üöÄ ~ purchaseOrder.controller.js: Invoice created successfully:",
      invoice
    );

    // ‚úÖ T·∫°o Transaction cho h√≥a ƒë∆°n mua h√†ng
    const transactionData = {
      transaction_code: `TRX-PO-${Date.now()}`, // T·ª± ƒë·ªông sinh m√£ transaction
      type: "payment", // Th∆∞·ªùng l√† 'payment' cho h√≥a ƒë∆°n mua h√†ng
      amount: invoice.final_amount, // L·∫•y t·ª´ invoice ƒë√£ t·∫°o
      description: `Thanh to√°n cho h√≥a ƒë∆°n mua h√†ng ${invoice.invoice_code}`,
      category: "purchase_payment", // Danh m·ª•c mua h√†ng
      payment_method: purchaseOrderResult.payment_method || "Chuy·ªÉn kho·∫£n", // L·∫•y t·ª´ PO ho·∫∑c m·∫∑c ƒë·ªãnh
      related_type: "invoice", // Li√™n k·∫øt v·ªõi invoice
      related_id: invoice.invoice_id, // L·∫•y t·ª´ invoice ƒë√£ t·∫°o
    };

    // transactionService.createTransaction ƒë√£ ƒë∆∞·ª£c refactor ƒë·ªÉ tr·∫£ v·ªÅ Promise
    const transaction = await TransactionService.createTransaction(
      transactionData
    );
    console.log(
      "üöÄ ~ purchaseOrder.controller.js: Transaction created successfully:",
      transaction
    );

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng
    return res.status(201).json({
      success: true,
      data: {
        purchaseOrder: purchaseOrderResult,
        invoice, // ‚úÖ Th√™m invoice v√†o response
        transaction, // ‚úÖ Th√™m transaction v√†o response
      },
      message: "Purchase Order, Invoice, and Transaction created successfully.",
    });
  } catch (err) {
    console.error(
      "üöÄ ~ purchaseOrder.controller.js: create - L·ªói trong qu√° tr√¨nh t·∫°o Purchase Order v√† c√°c b·∫£n ghi li√™n quan:",
      err
    );
    // X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi l·ªói
    next(err); // Chuy·ªÉn l·ªói ƒë·∫øn middleware x·ª≠ l√Ω l·ªói
  }
};

exports.getAll = async (req, res, next) => {
  try {
    const result = await service.getAllPurchaseOrders();
    res.json({ success: true, data: result });
  } catch (err) {
    next(err);
  }
};

exports.getWithDetailsById = async (req, res, next) => {
  try {
    const result = await service.getPurchaseOrderDetailsById(req.params.id);
    if (!result) {
      return res.status(404).json({ success: false, message: "Not found" });
    }
    res.json({ success: true, data: result });
  } catch (err) {
    next(err);
  }
};

exports.postOrder = async (req, res, next) => {
  // ‚úÖ Chuy·ªÉn h√†m th√†nh async
  try {
    const result = await service.confirmPurchaseOrder(req.params.id); // service.confirmPurchaseOrder c·∫ßn tr·∫£ v·ªÅ Promise
    res.json({ success: true, data: result });
  } catch (err) {
    console.error("üöÄ ~ purchaseOrder.controller.js: postOrder - L·ªói:", err);
    next(err);
  }
};

exports.updatePOWithDetails = async (req, res, next) => {
  // ‚úÖ Chuy·ªÉn h√†m th√†nh async
  const poId = req.params.id;
  const { supplier_name, note, status, details } = req.body;

  try {
    // service.updatePOWithDetails c·∫ßn tr·∫£ v·ªÅ Promise
    const result = await service.updatePOWithDetails(
      poId,
      { supplier_name, note, status },
      details
    );
    res.json({ success: true, data: result });
  } catch (err) {
    console.error(
      "üöÄ ~ purchaseOrder.controller.js: updatePOWithDetails - L·ªói:",
      err
    );
    next(err);
  }
};
