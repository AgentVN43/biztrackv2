// const db = require('../../config/db.config');

// exports.createWarehouse = (data, callback) => {
//   const { warehouse_id, warehouse_name, warehouse_location, warehouse_capacity } = data;
//   const query = 'INSERT INTO warehouses (warehouse_id, warehouse_name, warehouse_location, warehouse_capacity) VALUES (?, ?, ?, ?)';
//   db.query(query, [warehouse_id, warehouse_name, warehouse_location, warehouse_capacity], callback);
// };

// exports.getAllWarehouses = (callback) => {
//   const query = 'SELECT * FROM warehouses';
//   db.query(query, callback);
// };

// exports.getWarehouseById = (id, callback) => {
//   const query = 'SELECT * FROM warehouses WHERE warehouse_id = ?';
//   db.query(query, [id], callback);
// };

// exports.updateWarehouse = (id, data, callback) => {
//   const { warehouse_name, warehouse_location, warehouse_capacity } = data;
//   const query = `
//     UPDATE warehouses
//     SET warehouse_name = ?, warehouse_location = ?, warehouse_capacity = ?
//     WHERE warehouse_id = ?
//   `;
//   db.query(query, [warehouse_name, warehouse_location, warehouse_capacity, id], callback);
// };

// exports.deleteWarehouse = (id, callback) => {
//   const query = 'DELETE FROM warehouses WHERE warehouse_id = ?';
//   db.query(query, [id], callback);
// };

const db = require("../../config/db.config"); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng ƒë·∫øn file c·∫•u h√¨nh database c·ªßa b·∫°n
const { v4: uuidv4 } = require("uuid"); // ƒê·ªÉ t·∫°o UUID cho warehouse_id n·∫øu c·∫ßn

const WarehouseModel = {
  /**
   * T·∫°o m·ªôt b·∫£n ghi kho m·ªõi.
   * @param {Object} data - D·ªØ li·ªáu kho.
   * @param {string} [data.warehouse_id] - ID kho (t√πy ch·ªçn, s·∫Ω t·ª± sinh n·∫øu kh√¥ng c√≥).
   * @param {string} data.warehouse_name - T√™n kho.
   * @param {string} data.warehouse_location - V·ªã tr√≠ kho.
   * @param {number} data.warehouse_capacity - S·ª©c ch·ª©a kho.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng kho ƒë√£ t·∫°o.
   * @throws {Error} N·∫øu thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ho·∫∑c c√≥ l·ªói database.
   */
  create: async (data) => {
    const warehouse_id = data.warehouse_id || uuidv4(); // S·ª≠ d·ª•ng ID n·∫øu c√≥, n·∫øu kh√¥ng t·ª± sinh
    const { warehouse_name, warehouse_location, warehouse_capacity } = data;

    // Validate inputs
    if (
      !warehouse_name ||
      !warehouse_location ||
      warehouse_capacity === undefined
    ) {
      throw new Error(
        "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ t·∫°o kho (t√™n, v·ªã tr√≠, s·ª©c ch·ª©a)."
      );
    }

    const query =
      "INSERT INTO warehouses (warehouse_id, warehouse_name, warehouse_location, warehouse_capacity) VALUES (?, ?, ?, ?)";
    const values = [
      warehouse_id,
      warehouse_name,
      warehouse_location,
      warehouse_capacity,
    ];

    try {
      await db.promise().query(query, values);
      return { warehouse_id, ...data };
    } catch (error) {
      console.error("üöÄ ~ WarehouseModel: create - L·ªói khi t·∫°o kho:", error);
      throw error;
    }
  },

  /**
   * L·∫•y t·∫•t c·∫£ c√°c b·∫£n ghi kho.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng kho.
   * @throws {Error} N·∫øu c√≥ l·ªói database.
   */
  getAll: async () => {
    const query = "SELECT * FROM warehouses ORDER BY warehouse_name ASC";
    try {
      const [rows] = await db.promise().query(query);
      return rows;
    } catch (error) {
      console.error(
        "üöÄ ~ WarehouseModel: getAll - L·ªói khi l·∫•y t·∫•t c·∫£ kho:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y m·ªôt b·∫£n ghi kho theo ID.
   * @param {string} id - ID c·ªßa kho.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng kho ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   * @throws {Error} N·∫øu c√≥ l·ªói database.
   */
  getById: async (id) => {
    const query = "SELECT * FROM warehouses WHERE warehouse_id = ?";
    try {
      const [rows] = await db.promise().query(query, [id]);
      return rows.length ? rows[0] : null;
    } catch (error) {
      console.error(
        "üöÄ ~ WarehouseModel: getById - L·ªói khi l·∫•y kho theo ID:",
        error
      );
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin m·ªôt b·∫£n ghi kho.
   * @param {string} id - ID c·ªßa kho c·∫ßn c·∫≠p nh·∫≠t.
   * @param {Object} data - D·ªØ li·ªáu c·∫≠p nh·∫≠t.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng kho ƒë√£ c·∫≠p nh·∫≠t ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   * @throws {Error} N·∫øu kh√¥ng c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t ho·∫∑c c√≥ l·ªói database.
   */
  update: async (id, data) => {
    const fields = [];
    const values = [];

    // X√¢y d·ª±ng ƒë·ªông c√°c c·∫∑p 'field = ?' v√† gi√° tr·ªã t∆∞∆°ng ·ª©ng
    // Ch·ªâ th√™m c√°c tr∆∞·ªùng c√≥ trong b·∫£ng
    if (data.warehouse_name !== undefined) {
      fields.push("warehouse_name = ?");
      values.push(data.warehouse_name);
    }
    if (data.warehouse_location !== undefined) {
      fields.push("warehouse_location = ?");
      values.push(data.warehouse_location);
    }
    if (data.warehouse_capacity !== undefined) {
      fields.push("warehouse_capacity = ?");
      values.push(data.warehouse_capacity);
    }

    if (fields.length === 0) {
      throw new Error("Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t.");
    }

    fields.push(`updated_at = CURRENT_TIMESTAMP`); // Lu√¥n c·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
    values.push(id); // Th√™m ID v√†o cu·ªëi cho m·ªánh ƒë·ªÅ WHERE

    const query = `UPDATE warehouses SET ${fields.join(
      ", "
    )} WHERE warehouse_id = ?`;

    try {
      const [result] = await db.promise().query(query, values);
      if (result.affectedRows === 0) {
        return null; // Kh√¥ng t√¨m th·∫•y kho ƒë·ªÉ c·∫≠p nh·∫≠t
      }
      return { warehouse_id: id, ...data }; // Tr·∫£ v·ªÅ th√¥ng tin kho ƒë√£ c·∫≠p nh·∫≠t
    } catch (error) {
      console.error(
        "üöÄ ~ WarehouseModel: update - L·ªói khi c·∫≠p nh·∫≠t kho:",
        error
      );
      throw error;
    }
  },

  /**
   * X√≥a m·ªôt b·∫£n ghi kho theo ID.
   * @param {string} id - ID c·ªßa kho c·∫ßn x√≥a.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng th√†nh c√¥ng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   * @throws {Error} N·∫øu c√≥ l·ªói database.
   */
  delete: async (id) => {
    const query = "DELETE FROM warehouses WHERE warehouse_id = ?";
    try {
      const [result] = await db.promise().query(query, [id]);
      if (result.affectedRows === 0) {
        return null; // Kh√¥ng t√¨m th·∫•y kho ƒë·ªÉ x√≥a
      }
      return { message: "Kho ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng", warehouse_id: id };
    } catch (error) {
      console.error("üöÄ ~ WarehouseModel: delete - L·ªói khi x√≥a kho:", error);
      throw error;
    }
  },
};

module.exports = WarehouseModel;
