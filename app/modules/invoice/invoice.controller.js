const { createResponse } = require("../../utils/response");
const InvoiceService = require("./invoice.service");
const CustomerModel = require("../customers/customer.model");
const { paginateResponse } = require("../../utils/pagination");

const getAllInvoices = async (req, res) => {
  try {
    const invoices = await InvoiceService.getAll();
    return res.status(200).json(invoices);
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const getPaidInvoices = async (req, res) => {
  try {
    const invoices = await InvoiceService.getPaid();
    return res.status(200).json(invoices);
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const getUnPaidInvoices = async (req, res) => {
  try {
    // 1. L·∫•y params ph√¢n trang
    const page = parseInt(req.query.page) > 0 ? parseInt(req.query.page) : 1;
    const limit = parseInt(req.query.limit) > 0 ? parseInt(req.query.limit) : 10;
    const offset = (page - 1) * limit;

    // 2. L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n ch∆∞a thanh to√°n
    const allInvoices = await InvoiceService.getUnPaid();
    const sortedInvoices = allInvoices.sort((a, b) => new Date(b.issued_date) - new Date(a.issued_date));
    const total = sortedInvoices.length;
    const paginatedInvoices = sortedInvoices.slice(offset, offset + limit);

    // 3. L·∫•y th√¥ng tin kh√°ch h√†ng cho t·ª´ng h√≥a ƒë∆°n (song song)
    const customerIds = [...new Set(paginatedInvoices.map(inv => inv.customer_id).filter(Boolean))];
    const customerMap = {};
    await Promise.all(customerIds.map(async (cid) => {
      const customer = await CustomerModel.getById(cid);
      if (customer) {
        customerMap[cid] = {
          customer_id: customer.customer_id,
          customer_name: customer.customer_name,
          email: customer.email,
          phone: customer.phone,
          debt: customer.debt
        };
      }
    }));

    // 4. Thay th·∫ø customer_id b·∫±ng object customer
    const invoicesWithCustomer = paginatedInvoices.map(inv => {
      const { customer_id, ...rest } = inv;
      return {
        ...rest,
        customer: customerMap[customer_id] || null
      };
    });

    // 5. Tr·∫£ v·ªÅ response ph√¢n trang
    return res.json(paginateResponse(invoicesWithCustomer, total, page, limit));
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const getInvoiceByInvoiceCode = async (req, res) => {
  const { invoice_code } = req.params;

  try {
    const invoice = await InvoiceService.getByInvoiceCode(invoice_code);
    if (!invoice)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n" });

    return res.status(200).json(invoice);
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const createInvoice = async (req, res) => {
  const data = req.body;

  try {
    const newInvoice = await InvoiceService.create(data);
    return res.status(201).json(newInvoice);
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const updateInvoice = async (req, res) => {
  const { invoice_code } = req.params; // Change from id to invoice_code
  const data = req.body;

  try {
    const updated = await InvoiceService.updateByInvoiceCode(
      invoice_code,
      data
    ); // Update service call
    if (!updated)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n" });

    return res.status(200).json(updated);
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

const deleteInvoice = async (req, res) => {
  const { id } = req.params;

  try {
    const deleted = await InvoiceService.delete(id);
    if (!deleted)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n" });

    return res.status(200).json({ message: "X√≥a h√≥a ƒë∆°n th√†nh c√¥ng" });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

/**
 * X·ª≠ l√Ω y√™u c·∫ßu POST ƒë·ªÉ ghi nh·∫≠n m·ªôt kho·∫£n thanh to√°n m·ªõi cho h√≥a ƒë∆°n.
 * ƒê√¢y l√† API endpoint cho c√°c l·∫ßn thanh to√°n ti·∫øp theo c·ªßa h√≥a ƒë∆°n.
 *
 * POST /api/invoices/:id/payments
 * Body: { "amount": 100000, "method": "Ti·ªÅn m·∫∑t" }
 *
 * @param {object} req - Express request object.
 * @param {object} res - Express response object.
 * @param {function} next - Express next middleware function.
 */
const recordInvoicePayment = async (req, res, next) => {
  const invoice_id = req.params.id; // L·∫•y ID h√≥a ƒë∆°n t·ª´ URL params
  const { amount, method } = req.body; // L·∫•y s·ªë ti·ªÅn v√† ph∆∞∆°ng th·ª©c thanh to√°n t·ª´ request body
  const initiatedByUserId = req.user ? req.user.user_id : null; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ ƒë·ªëi t∆∞·ª£ng req.user (n·∫øu c√≥ middleware x√°c th·ª±c)

  console.log(
    `üöÄ ~ invoice.controller.js: recordInvoicePayment - Nh·∫≠n y√™u c·∫ßu thanh to√°n cho h√≥a ƒë∆°n ${invoice_id}`
  );
  console.log(`üöÄ ~ S·ªë ti·ªÅn: ${amount}, Ph∆∞∆°ng th·ª©c: ${method}`);

  // X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
  if (!amount || typeof amount !== "number" || amount <= 0) {
    return createResponse(
      res,
      400,
      false,
      null,
      "S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá. Ph·∫£i l√† s·ªë d∆∞∆°ng."
    );
  }
  if (!method || typeof method !== "string" || method.trim() === "") {
    return createResponse(
      res,
      400,
      false,
      null,
      "Ph∆∞∆°ng th·ª©c thanh to√°n l√† b·∫Øt bu·ªôc."
    );
  }

  try {
    // G·ªçi InvoiceService ƒë·ªÉ x·ª≠ l√Ω logic nghi·ªáp v·ª• ghi nh·∫≠n thanh to√°n
    const updatedInvoice = await InvoiceService.recordPayment(
      invoice_id,
      amount,
      method,
      initiatedByUserId
    );

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng v·ªõi th√¥ng tin h√≥a ƒë∆°n ƒë√£ c·∫≠p nh·∫≠t
    createResponse(
      res,
      200,
      true,
      updatedInvoice,
      "Thanh to√°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† h√≥a ƒë∆°n c·∫≠p nh·∫≠t th√†nh c√¥ng."
    );
  } catch (error) {
    console.error(
      "üöÄ ~ invoice.controller.js: recordInvoicePayment - L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω thanh to√°n:",
      error
    );
    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng b√°o ph√π h·ª£p cho client
    if (error.message.includes("H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i")) {
      return createResponse(res, 404, false, null, error.message);
    } else if (
      error.message.includes("H√≥a ƒë∆°n n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n ƒë·∫ßy ƒë·ªß")
    ) {
      return createResponse(res, 400, false, null, error.message);
    }
    // Chuy·ªÉn c√°c l·ªói kh√¥ng x√°c ƒë·ªãnh kh√°c xu·ªëng middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
    next(error);
  }
};

const recordBulkPayment = async (req, res, next) => {
  const { payments, method } = req.body;
  const initiatedByUserId = req.user ? req.user.user_id : null;

  if (!Array.isArray(payments) || payments.length === 0) {
    return createResponse(res, 400, false, null, "Request body ph·∫£i c√≥ m·∫£ng 'payments' v√† kh√¥ng ƒë∆∞·ª£c r·ªóng.");
  }

  if (!method || typeof method !== "string" || method.trim() === "") {
    return createResponse(res, 400, false, null, "Ph∆∞∆°ng th·ª©c thanh to√°n 'method' l√† b·∫Øt bu·ªôc.");
  }

  try {
    const result = await InvoiceService.recordBulkPayment(payments, method, initiatedByUserId);
    createResponse(res, 200, true, result, "Thanh to√°n h√†ng lo·∫°t th√†nh c√¥ng.");
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh thanh to√°n h√†ng lo·∫°t:", error);
    if (error.message.includes("kh√¥ng c√πng m·ªôt kh√°ch h√†ng")) {
      return createResponse(res, 400, false, null, error.message);
    }
    next(error);
  }
}

/**
 * API hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c lo·∫°i thanh to√°n, bao g·ªìm c·∫£ thanh to√°n th·ªß c√¥ng t·ª´ routes invoice payments!
 * GET /api/invoices/payments/all
 * Query params: customer_id (optional)
 */
const getAllPayments = async (req, res, next) => {
  const { customer_id } = req.query;

  try {
    const payments = await InvoiceService.getAllPayments(customer_id);
    createResponse(res, 200, true, payments, "L·∫•y danh s√°ch thanh to√°n th√†nh c√¥ng.");
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch thanh to√°n:", error);
    next(error);
  }
};

module.exports = {
  getAllInvoices,
  createInvoice,
  updateInvoice,
  deleteInvoice,
  getPaidInvoices,
  getUnPaidInvoices,
  getInvoiceByInvoiceCode,
  recordInvoicePayment,
  recordBulkPayment,
  getAllPayments,
};
