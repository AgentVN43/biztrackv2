// const Customer = require("./customer.model");

// exports.createCustomer = (data, callback) => {
//   Customer.create(data, callback);
// };
// exports.getAllCustomers = (callback) => {
//   Customer.getAll(callback);
// };
// exports.getCustomerById = (id, callback) => {
//   Customer.getById(id, callback);
// };
// exports.updateCustomer = (id, data, callback) => {
//   Customer.update(id, data, callback);
// };
// exports.deleteCustomer = (id, callback) => {
//   Customer.delete(id, callback);
// };

// exports.updateOrdersAndStatus = (customerId, finalCallback) => {
//   // 1. L·∫•y th√¥ng tin kh√°ch h√†ng hi·ªán t·∫°i
//   Customer.getById(customerId, (err, customer) => {
//     if (err) {
//       return finalCallback(err);
//     }
//     if (!customer) {
//       return finalCallback(new Error('Customer not found'));
//     }

//     // 2. ƒê·∫øm s·ªë ƒë∆°n h√†ng "Ho√†n t·∫•t" c·ªßa kh√°ch h√†ng t·ª´ b·∫£ng Orders (s·ª≠ d·ª•ng h√†m t·ª´ model)
//     Customer.countCompletedOrders(customerId, (countErr, newTotalOrders) => {
//       if (countErr) {
//         return finalCallback(countErr);
//       }

//       // 3. X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi d·ª±a tr√™n newTotalOrders
//       let newStatus;
//       if (newTotalOrders < 10) {
//         newStatus = 'kh√°ch h√†ng m·ªõi';
//       } else if (newTotalOrders <= 20) {
//         newStatus = 'kh√°ch h√†ng th√¢n thi·∫øt';
//       } else if (newTotalOrders < 50) {
//         newStatus = 'kh√°ch h√†ng th∆∞·ªùng xuy√™n';
//       } else {
//         newStatus = 'kh√°ch h√†ng VIP';
//       }

//       // 4. T·∫°o ƒë·ªëi t∆∞·ª£ng ch·ª©a d·ªØ li·ªáu c·∫≠p nh·∫≠t
//       const updatedCustomerData = {
//         customer_name: customer.customer_name,
//         email: customer.email,
//         phone: customer.phone,
//         total_expenditure: customer.total_expenditure,
//         status: newStatus,
//         total_orders: newTotalOrders,
//       };

//       // 5. C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
//       Customer.update(customerId, updatedCustomerData, (updateErr, updatedCustomerWithStatus) => {
//         if (updateErr) {
//           return finalCallback(updateErr);
//         }
//         finalCallback(null, updatedCustomerWithStatus);
//       });
//     });
//   });
// };

const Customer = require("./customer.model");
const OrderService = require("../orders/order.service");
const CustomerModel = require("./customer.model"); // Added for importFromText

exports.createCustomer = async (data) => {
  return await Customer.create(data);
};

exports.getAllCustomers = async (skip, limit, filters = {}) => {
  const { customers, total } = await Customer.getAll(skip, limit, filters);
  return { customers, total };
};

exports.getCustomerById = async (id) => {
  return await Customer.getById(id);
};

exports.updateCustomer = async (id, data) => {
  return await Customer.update(id, data);
};

exports.deleteCustomer = async (id) => {
  return await Customer.delete(id);
};

exports.updateOrdersAndStatus = async (customerId) => {
  try {
    // 1. L·∫•y th√¥ng tin kh√°ch h√†ng hi·ªán t·∫°i
    const customer = await Customer.getById(customerId);
    if (!customer) {
      throw new Error("Customer not found");
    }

    // 2. ƒê·∫øm s·ªë ƒë∆°n h√†ng "Ho√†n t·∫•t" c·ªßa kh√°ch h√†ng
    const newTotalOrders = await Customer.countCompletedOrders(customerId);

    // 3. X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi
    let newStatus;
    if (newTotalOrders < 10) {
      newStatus = "kh√°ch h√†ng m·ªõi";
    } else if (newTotalOrders <= 20) {
      newStatus = "kh√°ch h√†ng th√¢n thi·∫øt";
    } else if (newTotalOrders < 50) {
      newStatus = "kh√°ch h√†ng th∆∞·ªùng xuy√™n";
    } else {
      newStatus = "kh√°ch h√†ng VIP";
    }

    // 4. T·∫°o ƒë·ªëi t∆∞·ª£ng ch·ª©a d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updatedCustomerData = {
      customer_name: customer.customer_name,
      email: customer.email,
      phone: customer.phone,
      total_expenditure: customer.total_expenditure,
      status: newStatus,
      total_orders: newTotalOrders,
    };

    // 5. C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
    return await Customer.update(customerId, updatedCustomerData);
  } catch (error) {
    console.error("L·ªói trong updateOrdersAndStatus:", error.message);
    throw error;
  }
};

exports.updateDebt = async (customerId, amount, increase = true) => {
  // amount: s·ªë ti·ªÅn tƒÉng/gi·∫£m
  // increase: true => tƒÉng, false => gi·∫£m
  return await Customer.updateDebt(customerId, amount, increase);
};

/**
 * Import customers t·ª´ text data (copy-paste t·ª´ Excel) - VALIDATION MODE
 * @param {string} textData - D·ªØ li·ªáu text ƒë∆∞·ª£c copy t·ª´ Excel
 * @param {string} delimiter - K√Ω t·ª± ph√¢n c√°ch (m·∫∑c ƒë·ªãnh: tab)
 * @param {boolean} validateOnly - Ch·ªâ validate, kh√¥ng insert v√†o DB
 * @returns {Object} - K·∫øt qu·∫£ import v·ªõi validation
 */
exports.importFromText = async (textData, delimiter = '\t', validateOnly = false) => {
  try {
    // Parse text data th√†nh array
    const lines = textData.trim().split('\n');
    if (lines.length < 2) {
      throw new Error('D·ªØ li·ªáu ph·∫£i c√≥ √≠t nh·∫•t 1 d√≤ng header v√† 1 d√≤ng d·ªØ li·ªáu');
    }

    // Parse headers
    const headers = lines[0].split(delimiter).map(h => h.trim().toLowerCase());
    
    // Validate required headers
    const requiredHeaders = ['customer_name', 'phone'];
    const missingHeaders = requiredHeaders.filter(header => 
      !headers.includes(header)
    );

    if (missingHeaders.length > 0) {
      throw new Error(`Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: ${missingHeaders.join(', ')}`);
    }

    // Process data rows
    const validData = [];
    const errors = [];
    const summary = {
      total: lines.length - 1,
      valid: 0,
      invalid: 0,
      skipped: 0
    };

    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) {
        summary.skipped++;
        continue;
      }

      const values = line.split(delimiter);
      const rowData = {};
      const rowErrors = [];

      // Map values to headers
      headers.forEach((header, index) => {
        rowData[header] = values[index] ? values[index].trim() : '';
      });

      // Validate required fields
      if (!rowData.customer_name) {
        rowErrors.push('T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      if (!rowData.phone) {
        rowErrors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      // Validate email format
      if (rowData.email && rowData.email !== '') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(rowData.email)) {
          rowErrors.push('Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        }
      }

      // Validate phone format
      if (rowData.phone) {
        const phoneRegex = /^[0-9+\-\s()]+$/;
        if (!phoneRegex.test(rowData.phone)) {
          rowErrors.push('S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë, d·∫•u +, -, (), v√† kho·∫£ng tr·∫Øng');
        }
      }

      // Validate numeric fields
      if (rowData.total_expenditure && parseFloat(rowData.total_expenditure) < 0) {
        rowErrors.push('T·ªïng chi ti√™u kh√¥ng ƒë∆∞·ª£c √¢m');
      }

      if (rowData.total_orders && parseInt(rowData.total_orders) < 0) {
        rowErrors.push('T·ªïng ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c √¢m');
      }

      if (rowData.debt && parseFloat(rowData.debt) < 0) {
        rowErrors.push('C√¥ng n·ª£ kh√¥ng ƒë∆∞·ª£c √¢m');
      }

      // Check for duplicate phone (ch·ªâ khi kh√¥ng ph·∫£i validateOnly)
      if (rowData.phone && !validateOnly) {
        try {
          const existingCustomer = await CustomerModel.findByPhone(rowData.phone);
          if (existingCustomer) {
            rowErrors.push('S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng');
          }
        } catch (dbError) {
          console.warn('‚ö†Ô∏è Database check skipped due to connection error:', dbError.message);
          // Skip duplicate check if database is not available
        }
      }

      // Add to results
      if (rowErrors.length > 0) {
        errors.push({
          row: i + 1,
          errors: rowErrors,
          data: rowData
        });
        summary.invalid++;
      } else {
        // Transform data for database
        const customerData = {
          customer_id: require('crypto').randomUUID(),
          customer_name: rowData.customer_name,
          email: rowData.email || null,
          phone: rowData.phone,
          status: rowData.status || 'active',
          total_expenditure: parseFloat(rowData.total_expenditure) || 0,
          total_orders: parseInt(rowData.total_orders) || 0,
          debt: parseFloat(rowData.debt) || 0,
          created_at: new Date(),
          updated_at: new Date()
        };

        validData.push(customerData);
        summary.valid++;
      }
    }

    // Insert valid data to database (ch·ªâ khi kh√¥ng ph·∫£i validateOnly)
    let insertedCount = 0;
    if (validData.length > 0 && !validateOnly) {
      try {
        insertedCount = await CustomerModel.bulkInsert(validData);
      } catch (dbError) {
        console.error('üöÄ ~ CustomerService.importFromText - Database insert failed:', dbError);
        throw new Error(`L·ªói l∆∞u d·ªØ li·ªáu: ${dbError.message}`);
      }
    }

    return {
      summary: {
        ...summary,
        inserted: insertedCount,
        validateOnly: validateOnly
      },
      validData,
      errors
    };

  } catch (error) {
    throw new Error(`L·ªói import d·ªØ li·ªáu: ${error.message}`);
  }
};

/**
 * T·∫°o template cho import text
 * @returns {string} - Template text
 */
exports.createImportTemplate = () => {
  const template = `customer_name\temail\tphone\tstatus\ttotal_expenditure\ttotal_orders\tdebt
Nguy·ªÖn VƒÉn A\tnguyenvana@email.com\t0123456789\tactive\t1000000\t5\t0
Tr·∫ßn Th·ªã B\ttranthib@email.com\t0987654321\tactive\t2000000\t3\t500000
L√™ VƒÉn C\tlevanc@email.com\t0369852147\tactive\t1500000\t2\t0

H∆∞·ªõng d·∫´n:
- Copy d·ªØ li·ªáu t·ª´ Excel v√† paste v√†o ƒë√¢y
- C√°c c·ªôt b·∫Øt bu·ªôc: customer_name, phone
- C√°c c·ªôt t√πy ch·ªçn: email, status, total_expenditure, total_orders, debt
- S·ª≠ d·ª•ng Tab (\\t) l√†m k√Ω t·ª± ph√¢n c√°ch
- D√≤ng tr·ªëng s·∫Ω ƒë∆∞·ª£c b·ªè qua`;
  
  return template;
};

// exports.getTotalRemainingValueForCustomer = async (customer_id) => {
//   const db = require("../../config/db.config");
//   // L·∫•y t·∫•t c·∫£ order_id c·ªßa kh√°ch, b·ªè qua ƒë∆°n b·ªã hu·ª∑
//   const [orders] = await db
//     .promise()
//     .query(
//       "SELECT order_id FROM orders WHERE customer_id = ? AND order_status != 'Hu·ª∑ ƒë∆°n'",
//       [customer_id]
//     );
//     if (!orders.length) return { total_remaining_value: 0, total_payable: 0 };
//   // T√≠nh t·ªïng remaining_value
//   const values = await Promise.all(
//     orders.map(async (o) => {
//       const summary = await OrderService.getOrderWithReturnSummary(o.order_id);
//       return summary ? Number(summary.remaining_value) : 0;
//     })
//   );

//   const total_remaining_value = values
//     .filter((v) => v > 0)
//     .reduce((sum, v) => sum + v, 0);
//   // T·ªïng doanh nghi·ªáp n·ª£ kh√°ch (ch·ªâ c·ªông ph·∫ßn √¢m, l·∫•y tr·ªã tuy·ªát ƒë·ªëi)
//   const total_payable = values
//     .filter((v) => v < 0)
//     .reduce((sum, v) => sum + Math.abs(v), 0);

//   return { total_remaining_value, total_payable };
// };

exports.getTotalRemainingValueForCustomer = async (customer_id) => {
  const db = require("../../config/db.config");
  // L·∫•y t·∫•t c·∫£ order_id c·ªßa kh√°ch, b·ªè qua ƒë∆°n b·ªã hu·ª∑
  const [orders] = await db
    .promise()
    .query(
      "SELECT order_id FROM orders WHERE customer_id = ? AND order_status != 'Hu·ª∑ ƒë∆°n'",
      [customer_id]
    );
  // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng, v·∫´n ph·∫£i ki·ªÉm tra giao d·ªãch thu/chi
  // L·∫•y t·ªïng ƒë√£ thu (receipt)
  const [receipts] = await db
    .promise()
    .query(
      "SELECT IFNULL(SUM(amount), 0) as total_receipt FROM transactions WHERE customer_id = ? AND type = 'receipt'",
      [customer_id]
    );
  const total_receipt = Number(receipts[0]?.total_receipt || 0);

  // L·∫•y t·ªïng ƒë√£ chi (payment)
  const [payments] = await db
    .promise()
    .query(
      "SELECT IFNULL(SUM(amount), 0) as total_payment FROM transactions WHERE customer_id = ? AND type = 'payment' AND order_id IS NULL",
      [customer_id]
    );
  const total_payment = Number(payments[0]?.total_payment || 0);

  // T√≠nh t·ªïng remaining_value t·ª´ c√°c ƒë∆°n h√†ng (n·∫øu c·∫ßn)
  let total_remaining_value = 0;
  if (orders.length) {
    const values = await Promise.all(
      orders.map(async (o) => {
        const summary = await OrderService.getOrderWithReturnSummary(
          o.order_id
        );
        return summary ? Number(summary.remaining_value) : 0;
      })
    );
    total_remaining_value = values
      .filter((v) => v > 0)
      .reduce((sum, v) => sum + v, 0);
  }

  // S·ªë ti·ªÅn kh√°ch c√≤n n·ª£ doanh nghi·ªáp (ho·∫∑c ng∆∞·ª£c l·∫°i)
  const net_debt = total_receipt - total_payment;

  return { total_remaining_value, net_debt };
};
