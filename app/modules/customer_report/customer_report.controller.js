const CustomerReportService = require("./customer_report.service");
const TransactionService = require("../transactions/transaction.service");
const TransactionModel = require("../transactions/transaction.model");
const { createResponse, errorResponse } = require("../../utils/response");
const CustomerReportController = {
  /**
   * L·∫•y t·ªïng quan (t·ªïng ƒë∆°n h√†ng, t·ªïng chi ti√™u) c·ªßa m·ªôt kh√°ch h√†ng.
   * GET /api/customers/:id/overview
   */
  getCustomerOverview: async (req, res, next) => {
    const customer_id = req.params.id;
    try {
      const overview = await CustomerReportService.getTotalOrdersAndExpenditure(
        customer_id
      );
      createResponse(
        res,
        200,
        true,
        overview,
        "Customer overview retrieved successfully."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ customer_report.controller.js: getCustomerOverview - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ b√°n h√†ng v√† tr·∫£ h√†ng chi ti·∫øt c·ªßa m·ªôt kh√°ch h√†ng.
   * GET /api/customers/:id/sales-return-history
   */
  getCustomerSalesReturnHistory: async (req, res, next) => {
    const customer_id = req.params.id;
    try {
      const history = await CustomerReportService.getSalesReturnHistory(
        customer_id
      );
      createResponse(
        res,
        200,
        true,
        history,
        "Customer sales/return history retrieved successfully."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ customer_report.controller.js: getCustomerSalesReturnHistory - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng c·ªßa m·ªôt kh√°ch h√†ng, bao g·ªìm chi ti·∫øt t·ª´ng ƒë∆°n h√†ng.
   * GET /api/customers/:id/order-history
   */
  getCustomerOrderHistory: async (req, res) => {
    const customer_id = req.params.id;
    try {
      const { page = 1, limit = 10 } = req.query;
      const parsedPage = parseInt(page);
      const parsedLimit = parseInt(limit);
      const { orderHistory, total } =
        await CustomerReportService.getOrderHistoryWithDetails(
          customer_id,
          parsedPage,
          parsedLimit);
      createResponse(
        res,
        200,
        true,
        orderHistory,
        "Customer order history retrieved successfully.",
        total,
        parsedPage,
        parsedLimit
      );
    } catch (error) {
      console.error(
        "üöÄ ~ customer_report.controller.js: getCustomerOrderHistory - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * L·∫•y t·ªïng c√¥ng n·ª£ c·∫ßn thu t·ª´ m·ªôt kh√°ch h√†ng.
   * GET /api/customers/:id/receivables
   */
  //

  getCustomerReceivables: async (req, res, next) => {
    const customer_id = req.params.id;
    try {
      // L·∫•y t·ªïng c√¥ng n·ª£
      const totalReceivables = await CustomerReportService.getReceivables(
        customer_id
      );

      // L·∫•y danh s√°ch h√≥a ƒë∆°n ch∆∞a thanh to√°n ƒë·ªß
      const unpaidInvoices =
        await CustomerReportService.getUnpaidOrPartiallyPaidInvoices(
          customer_id
        );

      // K·∫øt h·ª£p c·∫£ hai th√¥ng tin v√†o ph·∫£n h·ªìi
      const responseData = {
        customer_id,
        total_receivables: totalReceivables,
        unpaid_invoices: unpaidInvoices,
      };

      createResponse(
        res,
        200,
        true,
        responseData,
        "Customer receivables retrieved successfully."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ customer_report.controller.js: getCustomerReceivables - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  getCustomerTransactions: async (req, res, next) => {
    const { customerId } = req.params; // L·∫•y customerId t·ª´ URL params
    try {
      const transactions = await TransactionService.getTransactionsByCustomerId(
        customerId
      );
      if (!transactions || transactions.length === 0) {
        return createResponse(
          res,
          404,
          false,
          null,
          `Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o cho kh√°ch h√†ng ID: ${customerId}.`
        );
      }
      createResponse(
        res,
        200,
        true,
        transactions,
        "L·ªãch s·ª≠ giao d·ªãch c·ªßa kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportController: getCustomerTransactions - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  getCustomerFinancialLedger: async (req, res, next) => {
    const customer_id = req.params.id;
    try {
      const ledger = await CustomerReportService.getCustomerFinancialLedger(
        customer_id
      );
      if (ledger.length === 0) {
        return createResponse(
          res,
          404,
          false,
          null,
          `Kh√¥ng t√¨m th·∫•y c√°c m·ª•c nh·∫≠p s·ªï c√°i t√†i ch√≠nh cho kh√°ch h√†ng ID: ${customer_id}.`
        );
      }
      createResponse(
        res,
        200,
        true,
        ledger,
        "S·ªï c√°i t√†i ch√≠nh c·ªßa kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportController: getCustomerFinancialLedger - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * L·∫•y s·ªï c√°i giao d·ªãch chi ti·∫øt c·ªßa kh√°ch h√†ng
   * Hi·ªÉn th·ªã t·∫•t c·∫£ giao d·ªãch theo th·ª© t·ª± th·ªùi gian v·ªõi d∆∞ n·ª£
   * GET /api/customers/:id/transaction-ledger
   */
  getCustomerTransactionLedger: async (req, res, next) => {
    const customer_id = req.params.id;
    try {
      const { page = 1, limit = 10 } = req.query;
      const parsedPage = parseInt(page);
      const parsedLimit = parseInt(limit);
      const { ledger, total } = await CustomerReportService.getCustomerTransactionLedger(
        customer_id,
        parsedPage,
        parsedLimit
      );

      // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ 404 ƒë·ªÉ tr√°nh loop ·ªü frontend
      createResponse(
        res,
        200,
        true,
        ledger || [],
        ledger && ledger.length > 0
          ? "S·ªï c√°i giao d·ªãch c·ªßa kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng."
          : "Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch cho kh√°ch h√†ng n√†y.",
        total,
        parsedPage,
        parsedLimit
      );
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportController: getCustomerTransactionLedger - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  createCustomerTransaction: async (req, res, next) => {
    try {
      const { customerId } = req.params;
      const { amount, type, description } = req.body;
      if (!amount || !type) {
        return res.status(400).json({ success: false, message: "amount v√† type l√† b·∫Øt bu·ªôc" });
      }
      // type: 'receipt' (phi·∫øu thu), 'payment' (phi·∫øu chi)
      const transaction = await TransactionModel.createTransaction({
        transaction_code: `TXN-${Date.now()}`,
        type,
        amount,
        customer_id: customerId,
        description: description || (type === 'receipt' ? 'Phi·∫øu thu' : 'Phi·∫øu chi'),
        status: 'completed',
        created_at: new Date()
      });
      res.status(201).json({ success: true, data: transaction, message: "T·∫°o phi·∫øu th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  },
};

module.exports = CustomerReportController;
