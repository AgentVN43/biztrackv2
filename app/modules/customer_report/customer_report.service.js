const db = require("../../config/db.config"); // Import tr·ª±c ti·∫øp db instance
const OrderModel = require("../orders/order.model"); // ƒê·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng
const ProductEventModel = require("../product_report/product_event.model"); // ƒê·ªÉ l·∫•y l·ªãch s·ª≠ b√°n/tr·∫£ s·∫£n ph·∫©m
const InvoiceModel = require("../invoice/invoice.model"); // ƒê·ªÉ t√≠nh c√¥ng n·ª£
const TransactionModel = require("../transactions/transaction.model"); // ƒê·ªÉ t√≠nh c√¥ng n·ª£
const { calculateRefund } = require("../../utils/refundUtils");

const CustomerReportService = {
  /**
   * L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng v√† t·ªïng chi ti√™u c·ªßa m·ªôt kh√°ch h√†ng.
   * Ch·ªâ t√≠nh c√°c ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "Ho√†n t·∫•t".
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng ch·ª©a t·ªïng s·ªë ƒë∆°n h√†ng v√† t·ªïng chi ti√™u.
   * V√≠ d·ª•: { total_orders: 5, total_expenditure: 1250000.00 }
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getTotalOrdersAndExpenditure: async (customer_id) => {
    try {
      // 1. L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng v√† t·ªïng chi ti√™u t·ª´ orders
      const orderSql = `
        SELECT
          COUNT(order_id) AS total_orders,
          COALESCE(SUM(final_amount), 0) AS total_expenditure
        FROM orders
        WHERE customer_id = ? AND order_status = 'Ho√†n t·∫•t';
      `;
      const [orderRows] = await db.promise().query(orderSql, [customer_id]);
      
      // 2. L·∫•y t·∫•t c·∫£ ƒë∆°n tr·∫£ h√†ng ƒë√£ approved/completed
      const returnSql = `
        SELECT
          ro.return_id,
          ro.order_id
        FROM return_orders ro
        WHERE ro.customer_id = ?
          AND ro.status IN ('approved', 'completed')
      `;
      const [returnRows] = await db.promise().query(returnSql, [customer_id]);

      // T√≠nh l·∫°i t·ªïng refund ƒë√∫ng chu·∫©n cho t·∫•t c·∫£ return_orders
      let totalRefund = 0;
      const orderRefundMap = {};
      for (const ret of returnRows) {
        if (!ret.order_id) continue;
        if (!(ret.order_id in orderRefundMap)) {
          orderRefundMap[ret.order_id] = await calculateOrderTotalRefund(ret.order_id);
        }
      }
      totalRefund = Object.values(orderRefundMap).reduce((sum, v) => sum + v, 0);
      const totalExpenditure = parseFloat(orderRows[0].total_expenditure || 0);
      const netExpenditure = Math.max(0, totalExpenditure - totalRefund);
      
      console.log(`üîç getTotalOrdersAndExpenditure cho customer ${customer_id}:`);
      console.log(`  - Total orders: ${orderRows[0].total_orders}`);
      console.log(`  - Total expenditure (before returns): ${totalExpenditure}`);
      console.log(`  - Total refund: ${totalRefund}`);
      console.log(`  - Net expenditure: ${netExpenditure}`);
      
      return {
        total_orders: orderRows[0].total_orders,
        total_expenditure: netExpenditure
      };
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getTotalOrdersAndExpenditure - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ b√°n h√†ng v√† tr·∫£ h√†ng c·ªßa m·ªôt kh√°ch h√†ng.
   * L·∫•y d·ªØ li·ªáu t·ª´ product_events v√† l·ªçc theo customer_id th√¥ng qua order_id.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c s·ª± ki·ªán b√°n/tr·∫£.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getSalesReturnHistory: async (customer_id) => {
    try {
      // Ch√∫ng ta c·∫ßn JOIN product_events v·ªõi orders ƒë·ªÉ l·∫•y customer_id
      const sql = `
        SELECT
          pe.event_id,
          pe.product_id,
          p.product_name, -- Gi·∫£ ƒë·ªãnh c√≥ b·∫£ng products ƒë·ªÉ JOIN
          pe.quantity_impact,
          pe.transaction_price,
          pe.event_type,
          pe.event_timestamp,
          pe.reference_id AS order_id,
          pe.description,
          pe.current_stock_after
        FROM product_events pe
        JOIN orders o ON pe.reference_id = o.order_id
        LEFT JOIN products p ON pe.product_id = p.product_id -- ƒê·ªÉ l·∫•y t√™n s·∫£n ph·∫©m
        WHERE o.customer_id = ?
        AND pe.reference_type = 'ORDER' -- Ch·ªâ l·∫•y s·ª± ki·ªán li√™n quan ƒë·∫øn ƒë∆°n h√†ng
        AND (pe.event_type = 'ORDER_SOLD' OR pe.event_type = 'ORDER_CANCELLED' OR pe.event_type = 'RETURN_FROM_CUSTOMER')
        ORDER BY pe.event_timestamp DESC;
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);

      // Format l·∫°i event_type cho d·ªÖ ƒë·ªçc
      return rows.map((row) => {
        let displayEventType = row.event_type;
        switch (row.event_type) {
          case "ORDER_SOLD":
            displayEventType = "B√°n h√†ng";
            break;
          case "ORDER_CANCELLED":
            displayEventType = "H·ªßy ƒë∆°n h√†ng"; // Ho·∫∑c 'Ho√†n tr·∫£ kho' n·∫øu n√≥ th·ªÉ hi·ªán vi·ªác ho√†n nh·∫≠p
            break;
          case "RETURN_FROM_CUSTOMER":
            displayEventType = "Kh√°ch h√†ng tr·∫£ h√†ng";
            break;
          // Th√™m c√°c case kh√°c n·∫øu c√≥ th√™m event_type
        }
        return {
          event_id: row.event_id,
          product_id: row.product_id,
          product_name: row.product_name,
          quantity_impact: row.quantity_impact,
          transaction_price: row.transaction_price,
          event_type: displayEventType,
          event_timestamp: row.event_timestamp,
          order_id: row.order_id,
          description: row.description,
          current_stock_after: row.current_stock_after,
        };
      });
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getSalesReturnHistory - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng v√† tr·∫£ h√†ng c·ªßa m·ªôt kh√°ch h√†ng.
   * Tr·∫£ v·ªÅ c·∫£ ƒë∆°n h√†ng v√† ƒë∆°n tr·∫£ h√†ng nh∆∞ c√°c s·ª± ki·ªán ri√™ng bi·ªát.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c s·ª± ki·ªán ƒë√£ ƒë·ªãnh d·∫°ng.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getOrderHistoryWithDetails: async (customer_id) => {
    try {
      const result = [];

      // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
      const orderSql = `
        SELECT
          o.order_id,
          o.order_code,
          o.order_date,
          o.order_status,
          o.total_amount,
          o.final_amount,
          o.discount_amount,
          o.note,
          o.payment_method,
          o.created_at,
          o.updated_at
        FROM orders o
        WHERE o.customer_id = ?
        ORDER BY o.created_at DESC;
      `;
      const [orders] = await db.promise().query(orderSql, [customer_id]);

      // 2. L·∫•y t·∫•t c·∫£ ƒë∆°n tr·∫£ h√†ng (kh√¥ng group theo order_id)
      const returnSql = `
        SELECT
          ro.return_id,
          ro.order_id,
          ro.status as return_status,
          ro.created_at as return_created_at,
          ro.note as return_note,
          o.order_code as related_order_code
        FROM return_orders ro
        LEFT JOIN orders o ON ro.order_id = o.order_id
        WHERE ro.customer_id = ?
          AND ro.status IN ('approved', 'completed')
        ORDER BY ro.created_at ASC;
      `;
      const [returns] = await db.promise().query(returnSql, [customer_id]);

      // T√≠nh l·∫°i refund cho t·ª´ng l·∫ßn tr·∫£
      const refundMap = {};
      for (const ret of returns) {
        if (!ret.order_id) {
          refundMap[ret.return_id] = 0;
        } else {
          const arr = await calculateRefundForEachReturn(ret.order_id);
          const found = arr.find(r => r.return_id === ret.return_id);
          refundMap[ret.return_id] = found ? found.refund_amount : 0;
        }
      }

      // 3. Th√™m c√°c ƒë∆°n h√†ng v√†o k·∫øt qu·∫£
      orders.forEach(order => {
        result.push({
          order_id: order.order_id,
          order_code: order.order_code,
          order_date: order.order_date,
          order_status: order.order_status,
          total_amount: order.total_amount,
          final_amount: order.final_amount,
          discount_amount: order.discount_amount,
          note: order.note,
          payment_method: order.payment_method,
          created_at: order.created_at,
          updated_at: order.updated_at,
          // Th√¥ng tin b·ªï sung ƒë·ªÉ ph√¢n bi·ªát v·ªõi return
          type: 'order',
          related_order_code: null,
          return_count: 0,
          has_returns: false,
          total_refund: 0,
          final_amount_after_returns: parseFloat(order.final_amount)
        });
      });

      // 4. Th√™m c√°c ƒë∆°n tr·∫£ h√†ng v√†o k·∫øt qu·∫£ (m·ªói l·∫ßn tr·∫£ l√† 1 record ri√™ng bi·ªát)
      returns.forEach(ret => {
        result.push({
          order_id: ret.return_id, // S·ª≠ d·ª•ng return_id l√†m order_id ƒë·ªÉ t∆∞∆°ng th√≠ch
          order_code: `TH-${ret.related_order_code}`,
          order_date: ret.return_created_at,
          order_status: ret.return_status,
          total_amount: refundMap[ret.return_id],
          final_amount: refundMap[ret.return_id],
          discount_amount: "0.00",
          note: ret.return_note,
          payment_method: "refund",
          created_at: ret.return_created_at,
          updated_at: ret.return_created_at,
          // Th√¥ng tin b·ªï sung ƒë·ªÉ ph√¢n bi·ªát v·ªõi order th·∫≠t
          type: 'return',
          related_order_code: ret.related_order_code,
          return_count: 0,
          has_returns: true,
          total_refund: refundMap[ret.return_id],
          final_amount_after_returns: 0
        });
      });

      // 5. S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
      result.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

      return result;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getOrderHistoryWithDetails - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * T√≠nh to√°n t·ªïng c√¥ng n·ª£ c·∫ßn thu t·ª´ m·ªôt kh√°ch h√†ng.
   * C√¥ng n·ª£ ƒë∆∞·ª£c t√≠nh b·∫±ng t·ªïng c√°c h√≥a ƒë∆°n ch∆∞a thanh to√°n.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<number>} Promise gi·∫£i quy·∫øt v·ªõi t·ªïng c√¥ng n·ª£.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getReceivables: async (customer_id) => {
    try {
      // 1. L·∫•y t·ªïng c√¥ng n·ª£ t·ª´ c√°c h√≥a ƒë∆°n ch∆∞a thanh to√°n
      const invoiceSql = `
        SELECT COALESCE(SUM(final_amount - amount_paid), 0) AS total_receivables
        FROM invoices
        WHERE customer_id = ?
          AND (status = 'pending' OR status = 'partial_paid' OR status = 'overdue')
          AND status != 'cancelled'
      `;
      const [invoiceRows] = await db.promise().query(invoiceSql, [customer_id]);
      const invoiceDebt = parseFloat(invoiceRows[0].total_receivables || 0);

      // 2. L·∫•y t·ªïng c√¥ng n·ª£ t·ª´ c√°c ƒë∆°n h√†ng ch∆∞a c√≥ h√≥a ƒë∆°n
      const orderSql = `
        SELECT COALESCE(SUM(o.final_amount - o.amount_paid), 0) AS total_orders_debt
        FROM orders o
        LEFT JOIN invoices i ON o.order_id = i.order_id
        WHERE o.customer_id = ?
          AND o.order_status IN ('M·ªõi', 'X√°c nh·∫≠n', 'Ho√†n t·∫•t')
          AND o.order_status != 'Hu·ª∑ ƒë∆°n'
          AND i.order_id IS NULL
      `;
      const [orderRows] = await db.promise().query(orderSql, [customer_id]);
      const orderDebt = parseFloat(orderRows[0].total_orders_debt || 0);

      // 3. L·∫•y t·ªïng s·ªë ti·ªÅn ƒë√£ tr·∫£ h√†ng t·ª´ return_orders
      const returnSql = `
        SELECT DISTINCT ro.order_id
        FROM return_orders ro
        WHERE ro.customer_id = ?
          AND ro.status IN ('approved', 'completed')
      `;
      const [returnRows] = await db.promise().query(returnSql, [customer_id]);
      let totalRefund = 0;
      for (const row of returnRows) {
        if (row.order_id) {
          totalRefund += await calculateOrderTotalRefund(row.order_id);
        }
      }

      // T·ªïng c√¥ng n·ª£ = C√¥ng n·ª£ invoices + C√¥ng n·ª£ orders - T·ªïng ti·ªÅn ƒë√£ tr·∫£ h√†ng
      const totalReceivables = invoiceDebt + orderDebt - totalRefund;

      console.log(`üîç getReceivables cho customer ${customer_id}:`);
      console.log(`  - Invoice debt: ${invoiceDebt}`);
      console.log(`  - Order debt: ${orderDebt}`);
      console.log(`  - Total refund: ${totalRefund}`);
      console.log(`  - Total receivables: ${totalReceivables}`);

      return Math.max(0, totalReceivables);
    } catch (error) {
      console.error("üöÄ ~ CustomerReportService: getReceivables - L·ªói:", error);
      throw error;
    }
  },

  getUnpaidOrPartiallyPaidInvoices: async (customer_id) => {
    try {
      const sql = `
        SELECT
          invoice_id,
          invoice_code,
          invoice_type,
          order_id,
          final_amount,
          amount_paid,
          (final_amount - amount_paid) AS remaining_receivable,
          status,
          issued_date,
          due_date,
          note
        FROM invoices
        WHERE customer_id = ?
          AND (status = 'pending' OR status = 'partial_paid' OR status = 'overdue')
        ORDER BY issued_date ASC;
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);
      return rows;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getUnpaidOrPartiallyPaidInvoices - L·ªói:",
        error
      );
      throw error;
    }
  },

  getCustomerFinancialLedger: async (customer_id) => {
    try {
      // 1. L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n b√°n h√†ng c·ªßa kh√°ch h√†ng
      const invoices = await InvoiceModel.getAllByCustomerId(customer_id); // Gi·∫£ ƒë·ªãnh InvoiceModel c√≥ h√†m getAllByCustomerId
      const mappedInvoices = invoices.map((inv) => ({
        reference_code: inv.invoice_code,
        timestamp: inv.issued_date,
        entry_type: "Sale Invoice", // Ho·∫∑c 'Credit Note' n·∫øu c√≥ lo·∫°i ƒë√≥
        debit_amount: parseFloat(inv.final_amount),
        credit_amount: 0,
        description: `H√≥a ƒë∆°n b√°n h√†ng: ${inv.invoice_code}`,
        invoice_id: inv.invoice_id,
        related_id: inv.order_id, // N·∫øu mu·ªën li√™n k·∫øt v·ªõi order
      }));

      // 2. L·∫•y t·∫•t c·∫£ giao d·ªãch thu ti·ªÅn/ho√†n ti·ªÅn c·ªßa kh√°ch h√†ng
      // Th√™m category 'sale_refund' n·∫øu c√≥
      const transactions = await TransactionModel.getTransactionsByCustomerId(
        customer_id
      ); // H√†m n√†y ƒë√£ c√≥ trong TransactionModel
      const mappedTransactions = transactions.map((trx) => {
        let entryType;
        let debit = 0;
        let credit = 0;
        let description = trx.description;

        switch (trx.type) {
          case "receipt":
            entryType = "Payment Received";
            credit = parseFloat(trx.amount);
            description = `Phi·∫øu thu: ${trx.transaction_code}`;
            if (trx.related_type === "invoice" && trx.invoice_code) {
              description += ` (Hƒê: ${trx.invoice_code})`;
            }
            break;
          case "refund": // Gi·∫£ ƒë·ªãnh refund l√† kho·∫£n chi tr·∫£ cho kh√°ch h√†ng
            entryType = "Refund Issued";
            debit = parseFloat(trx.amount); // Refund c√≥ th·ªÉ coi l√† gi·∫£m c√¥ng n·ª£ cho m√¨nh -> tƒÉng n·ª£ kh√°ch h√†ng (n·∫øu ti·ªÅn ra kh·ªèi m√¨nh)
            description = `Ho√†n ti·ªÅn: ${trx.transaction_code}`;
            break;
          // C√≥ th·ªÉ th√™m c√°c lo·∫°i giao d·ªãch kh√°c nh∆∞ adjustment (ƒëi·ªÅu ch·ªânh)
          default:
            entryType = "Other Transaction";
            break;
        }

        return {
          reference_code: trx.transaction_code,
          timestamp: trx.created_at,
          entry_type: entryType,
          debit_amount: debit,
          credit_amount: credit,
          description: description,
          transaction_id: trx.transaction_id,
          related_id: trx.related_id, // ID c·ªßa h√≥a ƒë∆°n ho·∫∑c order li√™n quan
        };
      });

      // 3. K·∫øt h·ª£p v√† s·∫Øp x·∫øp theo th·ªùi gian
      const combinedEntries = [...mappedInvoices, ...mappedTransactions];
      combinedEntries.sort(
        (a, b) => new Date(a.timestamp) - new Date(b.timestamp)
      );

      // 4. T√≠nh to√°n running balance
      let currentRunningBalance = 0;
      const ledger = combinedEntries.map((entry) => {
        // H√≥a ƒë∆°n b√°n h√†ng l√†m tƒÉng c√¥ng n·ª£ kh√°ch h√†ng (Debits Receivable)
        // Thanh to√°n / Ho√†n ti·ªÅn l√†m gi·∫£m c√¥ng n·ª£ kh√°ch h√†ng (Credits Receivable)
        currentRunningBalance += entry.debit_amount - entry.credit_amount;
        return {
          ...entry,
          running_balance: parseFloat(currentRunningBalance.toFixed(2)), // ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n
        };
      });

      return ledger;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getCustomerFinancialLedger - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ giao d·ªãch chi ti·∫øt c·ªßa kh√°ch h√†ng theo format s·ªï c√°i
   * Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c giao d·ªãch t·ª´ t·∫°o ƒë∆°n, thanh to√°n tr∆∞·ªõc, thanh to√°n sau...
   * 
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng
   * @returns {Promise<Array>} Danh s√°ch giao d·ªãch v·ªõi d∆∞ n·ª£
   */
  getCustomerTransactionLedger: async (customer_id) => {
    try {
      // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng
      const ordersSql = `
        SELECT 
          o.order_id,
          o.order_code,
          o.order_date,
          o.order_status,
          o.final_amount,
          o.amount_paid,
          o.created_at,
          o.updated_at
        FROM orders o
        WHERE o.customer_id = ? AND o.is_active = 1
        ORDER BY o.created_at ASC
      `;
      const [orders] = await db.promise().query(ordersSql, [customer_id]);

      // 2. L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n c·ªßa kh√°ch h√†ng
      const invoicesSql = `
        SELECT 
          invoice_id,
          invoice_code,
          order_id,
          final_amount,
          amount_paid,
          status,
          issued_date,
          created_at,
          updated_at
        FROM invoices 
        WHERE customer_id = ?
        ORDER BY created_at ASC
      `;
      const [invoices] = await db.promise().query(invoicesSql, [customer_id]);

      // 3. L·∫•y t·∫•t c·∫£ giao d·ªãch thanh to√°n
      const transactions = await TransactionModel.getTransactionsByCustomerId(customer_id);
      console.log("üöÄ ~ getCustomerTransactionLedger: ~ transactions:", transactions)

      // 3.5. ‚úÖ L·∫•y t·∫•t c·∫£ return_orders ƒë√£ approved/completed
      const returnOrdersSql = `
        SELECT 
          ro.return_id,
          ro.order_id,
          ro.status,
          ro.created_at,
          SUM(roi.refund_amount) as total_refund,
          o.order_code
        FROM return_orders ro
        JOIN return_order_items roi ON ro.return_id = roi.return_id
        LEFT JOIN orders o ON ro.order_id = o.order_id
        WHERE ro.customer_id = ?
          AND ro.status IN ('approved', 'completed')
        GROUP BY ro.return_id, ro.order_id, ro.status, ro.created_at, o.order_code
        ORDER BY ro.created_at ASC
      `;
      const [returnOrders] = await db.promise().query(returnOrdersSql, [customer_id]);

      // 4. T·∫°o danh s√°ch giao d·ªãch theo th·ª© t·ª± th·ªùi gian
      const allTransactions = [];

      // X·ª≠ l√Ω t·ª´ng ƒë∆°n h√†ng
      orders.forEach(order => {
        // B·ªé QUA ƒê∆†N H√ÄNG B·ªä H·ª¶Y
        if (order.order_status === 'Hu·ª∑ ƒë∆°n') return;
        const orderDate = new Date(order.created_at);
        const orderAdvanceAmount = parseFloat(order.amount_paid) || 0;

        // T√¨m h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng v·ªõi ƒë∆°n h√†ng n√†y
        // const relatedInvoice = invoices.find(inv => inv.order_id === order.order_id);

        // T√¨m c√°c giao d·ªãch thanh to√°n li√™n quan ƒë·∫øn ƒë∆°n h√†ng n√†y
        // const relatedTransactions = transactions.filter(trx =>
        //   trx.related_type === 'order' && trx.related_id === order.order_id
        // );

        // T√¨m c√°c giao d·ªãch thanh to√°n li√™n quan ƒë·∫øn invoice c·ªßa ƒë∆°n h√†ng n√†y
        // const relatedInvoiceTransactions = transactions.filter(trx => {
        //   if (trx.related_type === 'invoice' && relatedInvoice) {
        //     return trx.related_id === relatedInvoice.invoice_id && trx.type === 'receipt';
        //   }
        //   return false;
        // });

        // T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n th·ª±c t·∫ø cho invoice n√†y (manual payment, type: 'receipt')
        // const totalRealPaidForInvoice = relatedInvoiceTransactions.reduce((sum, trx) => sum + parseFloat(trx.amount), 0);

        // Advance payment ch·ªâ ghi nh·∫≠n ph·∫ßn c√≤n l·∫°i ch∆∞a ƒë∆∞·ª£c thanh to√°n th·ª±c t·∫ø
        // let advanceLeft = orderAdvanceAmount - totalRealPaidForInvoice;
        // if (orderAdvanceAmount > 0 && advanceLeft > 0.0001)
        if (orderAdvanceAmount > 0) { // d√πng > 0.0001 ƒë·ªÉ tr√°nh l·ªói s·ªë th·ª±c
          allTransactions.push({
            transaction_code: `TTDH-${order.order_code}`,
            transaction_date: new Date(orderDate.getTime() + 1000),
            type: 'partial_paid',
            amount: orderAdvanceAmount,
            description: `Thanh to√°n tr∆∞·ªõc cho ƒë∆°n h√†ng ${order.order_code}`,
            order_id: order.order_id,
            invoice_id: null,
            transaction_id: null,
            order_code: order.order_code,
            status: 'completed'
          });
        }
        // N·∫øu transaction th·ª±c t·∫ø l·ªõn h∆°n advance, ph·∫ßn d∆∞ s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n ·ªü transaction th·ª±c t·∫ø (kh√¥ng c·ªông d·ªìn v·ªõi advance)

        // Th√™m ƒë∆°n h√†ng ch√≠nh (t·∫°o n·ª£)
        allTransactions.push({
          transaction_code: order.order_code,
          transaction_date: orderDate,
          type: 'pending',
          amount: parseFloat(order.final_amount),
          description: `T·∫°o ƒë∆°n h√†ng ${order.order_code} - ${order.order_status}`,
          order_id: order.order_id,
          invoice_id: null,
          transaction_id: null,
          order_code: order.order_code,
          status: order.order_status
        });

        // N·∫øu c√≥ h√≥a ƒë∆°n v√† c√≥ thanh to√°n b·ªï sung (kh√¥ng ph·∫£i thanh to√°n tr∆∞·ªõc)
        // if (relatedInvoice && parseFloat(relatedInvoice.amount_paid) > orderAdvanceAmount) {
        //   const additionalPayment = parseFloat(relatedInvoice.amount_paid) - orderAdvanceAmount;
        //   // T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n th·ª±c t·∫ø cho invoice n√†y (manual payment, type: 'receipt')
        //   const totalRealPaidForInvoice = transactions.filter(trx => trx.related_type === 'invoice' && trx.related_id === relatedInvoice.invoice_id && trx.type === 'receipt')
        //     .reduce((sum, trx) => sum + parseFloat(trx.amount), 0);
        //   // S·ªë ti·ªÅn b·ªï sung c√≤n l·∫°i ch∆∞a ƒë∆∞·ª£c thanh to√°n th·ª±c t·∫ø
        //   const additionalLeft = additionalPayment - Math.max(0, totalRealPaidForInvoice - orderAdvanceAmount);
        //   if (additionalPayment > 0 && additionalLeft > 0.0001) {
        //     allTransactions.push({
        //       transaction_code: `${relatedInvoice.invoice_code}-ADDITIONAL`,
        //       transaction_date: new Date(relatedInvoice.created_at),
        //       type: 'partial_paid',
        //       amount: additionalLeft,
        //       description: `Thanh to√°n b·ªï sung cho h√≥a ƒë∆°n ${relatedInvoice.invoice_code}`,
        //       order_id: order.order_id,
        //       invoice_id: relatedInvoice.invoice_id,
        //       transaction_id: null,
        //       invoice_code: relatedInvoice.invoice_code,
        //       status: relatedInvoice.status
        //     });
        //   }
        // }
      });

      // X·ª≠ l√Ω return_orders: m·ªói l·∫ßn tr·∫£ l√† 1 record ri√™ng bi·ªát
      for (const returnOrder of returnOrders) {
        // T√≠nh s·ªë ti·ªÅn refund ƒë√∫ng cho l·∫ßn n√†y
        const refundArr = await calculateRefundForEachReturn(returnOrder.order_id);
        const found = refundArr.find(r => r.return_id === returnOrder.return_id);
        if (found && found.refund_amount > 0) {
          allTransactions.push({
            transaction_code: `TH-${returnOrder.order_code}`,
            transaction_date: new Date(returnOrder.created_at),
            type: 'return',
            amount: found.refund_amount,
            description: `Tr·∫£ h√†ng cho ƒë∆°n h√†ng ${returnOrder.order_code || returnOrder.order_id} - ${returnOrder.status}`,
            order_id: returnOrder.order_id,
            invoice_id: null,
            transaction_id: null,
            return_id: returnOrder.return_id,
            status: returnOrder.status
          });
        }
      }

      // Th√™m c√°c giao d·ªãch thanh to√°n ri√™ng l·∫ª (kh√¥ng li√™n quan ƒë·∫øn ƒë∆°n h√†ng c·ª• th·ªÉ)
      transactions.forEach(transaction => {
        // Ki·ªÉm tra xem giao d·ªãch n√†y c√≥ li√™n quan ƒë·∫øn order n√†o kh√¥ng
        let isRelatedToOrder = false;
        let isCancelled = false;
        // Ki·ªÉm tra tr·ª±c ti·∫øp v·ªõi order
        if (transaction.related_type === 'order') {
          const relatedOrder = orders.find(order => order.order_id === transaction.related_id);
          isRelatedToOrder = true;
          if (relatedOrder && relatedOrder.order_status === 'Hu·ª∑ ƒë∆°n') {
            isCancelled = true;
          }
        }
        // Ki·ªÉm tra th√¥ng qua invoice
        if (transaction.related_type === 'invoice') {
          const relatedInvoice = invoices.find(inv => inv.invoice_id === transaction.related_id);
          if (relatedInvoice) {
            if (relatedInvoice.status === 'cancelled') {
              isCancelled = true;
            }
            if (orders.some(order => order.order_id === relatedInvoice.order_id)) {
              isRelatedToOrder = true;
            }
          }
        }
        // B·ªé QUA TRANSACTION LI√äN QUAN ƒê·∫æN ƒê∆†N H√ÄNG/H√ìA ƒê∆†N B·ªä H·ª¶Y
        if (isCancelled) return;
        // Th√™m t·∫•t c·∫£ giao d·ªãch thanh to√°n (bao g·ªìm c·∫£ manual payments)
        // Nh∆∞ng ƒë√°nh d·∫•u r√µ r√†ng lo·∫°i thanh to√°n
        allTransactions.push({
          transaction_code: transaction.transaction_code,
          transaction_date: new Date(transaction.created_at),
          type: transaction.type,
          amount: parseFloat(transaction.amount),
          description: transaction.description || `Thanh to√°n ${transaction.transaction_code}`,
          order_id: transaction.related_type === 'order' ? transaction.related_id : null,
          invoice_id: transaction.related_type === 'invoice' ? transaction.related_id : null,
          transaction_id: transaction.transaction_id,
          status: 'completed',
          payment_method: transaction.payment_method,
          is_manual_payment: true // ƒê√°nh d·∫•u ƒë√¢y l√† thanh to√°n manual
        });
      });

      // 5. S·∫Øp x·∫øp theo th·ªùi gian (t·ª´ m·ªõi ƒë·∫øn c≈©)
      allTransactions.sort((a, b) => b.transaction_date - a.transaction_date);

      // Debug: In ra th·ª© t·ª± giao d·ªãch
      console.log('üîç Debug - Th·ª© t·ª± giao d·ªãch sau khi s·∫Øp x·∫øp (m·ªõi ƒë·∫øn c≈©):');
      allTransactions.forEach((t, index) => {
        console.log(`${index + 1}. ${t.transaction_code} | ${t.transaction_date} | ${t.type} | ${t.amount}`);
      });

      // L·ªçc b·ªè transaction c√≥ type === 'refund' kh·ªèi allTransactions tr∆∞·ªõc khi mapping
      const allTransactionsNoRefund = allTransactions.filter(txn => txn.type !== 'refund');

      // 6. T√≠nh to√°n d∆∞ n·ª£ theo logic s·ªï c√°i (t·ª´ c≈© ƒë·∫øn m·ªõi ƒë·ªÉ t√≠nh ƒë√∫ng)
      // ƒê·∫£o ng∆∞·ª£c l·∫°i ƒë·ªÉ t√≠nh t·ª´ c≈© ƒë·∫øn m·ªõi
      const reversedTransactions = [...allTransactionsNoRefund].reverse();
      let runningBalance = 0;
      const calculatedBalances = [];

      // T√≠nh d∆∞ n·ª£ t·ª´ c≈© ƒë·∫øn m·ªõi
      reversedTransactions.forEach((transaction, index) => {
        if (transaction.type === 'pending') {
          runningBalance += transaction.amount;
        } else if (transaction.type === 'partial_paid' || transaction.type === 'payment' || transaction.type === 'receipt') {
          runningBalance -= transaction.amount;
        } else if (transaction.type === 'return') {
          runningBalance -= transaction.amount;
        } else {
          // Log c√°c type l·∫° ƒë·ªÉ debug
          console.warn('‚ö†Ô∏è Transaction type l·∫°:', transaction.type, transaction);
        }
        calculatedBalances.push(runningBalance);
      });

      // ƒê·∫£o ng∆∞·ª£c l·∫°i ƒë·ªÉ hi·ªÉn th·ªã t·ª´ m·ªõi ƒë·∫øn c≈©
      calculatedBalances.reverse();

      const result = allTransactionsNoRefund.map((transaction, index) => {
        // Debug: In ra t·ª´ng b∆∞·ªõc t√≠nh d∆∞ n·ª£
        console.log(`üí∞ ${index + 1}. ${transaction.transaction_code} | ${transaction.type} | ${transaction.amount} | D∆∞ n·ª£: ${calculatedBalances[index]}`);

        // Format d·ªØ li·ªáu tr·∫£ v·ªÅ
        return {
          ma_giao_dich: transaction.transaction_code,
          ngay_giao_dich: transaction.transaction_date,
          loai: transaction.type,
          gia_tri: transaction.amount,
          du_no: calculatedBalances[index],
          mo_ta: transaction.description,
          order_id: transaction.order_id,
          invoice_id: transaction.invoice_id,
          transaction_id: transaction.transaction_id,
          order_code: transaction.order_code,
          invoice_code: transaction.invoice_code,
          status: transaction.status,
          phuong_thuc_thanh_toan: transaction.payment_method || null,
          la_thanh_toan_manual: transaction.is_manual_payment || false
        };
      });

      // L·ªçc l·∫°i theo loai === 'refund' ƒë·ªÉ ƒë·∫£m b·∫£o tuy·ªát ƒë·ªëi
      const filteredTransactions = result.filter(txn => txn.loai !== 'refund');
      // S·∫Øp x·∫øp l·∫°i theo th·ªùi gian (m·ªõi nh·∫•t l√™n tr√™n)
      filteredTransactions.sort((a, b) => new Date(b.ngay_giao_dich) - new Date(a.ngay_giao_dich));
      return filteredTransactions;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getCustomerTransactionLedger - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi lo·∫°i giao d·ªãch sang ti·∫øng Vi·ªát
   */
  // getTransactionTypeDisplay: (type) => {
  //   const typeMap = {
  //     'pending': 'T·∫°o ƒë∆°n h√†ng',
  //     'partial_paid': 'Thanh to√°n m·ªôt ph·∫ßn',
  //     'payment': 'Thanh to√°n th·ªß c√¥ng',
  //     'completed': 'Ho√†n t·∫•t',
  //     'cancelled': 'H·ªßy b·ªè'
  //   };
  //   return typeMap[type] || type;
  // },
};

// Th√™m h√†m t√≠nh t·ªïng refund ƒë√∫ng chu·∫©n cho 1 order (d√πng l·∫°i logic t·ª´ order.model)
async function calculateOrderTotalRefund(order_id) {
  const db = require("../../config/db.config");
  const OrderModel = require("../orders/order.model");
  const CustomerReturn = require("../customer_return/customer_return.model");
  const OrderDetailService = require("../orderDetails/orderDetail.service");

  // 1. L·∫•y order g·ªëc
  const order = await OrderModel.readById(order_id);
  if (!order) return 0;
  const final_amount = Number(order.final_amount || 0);
  const order_amount = Number(order.order_amount || order.discount_amount || 0);

  // 2. L·∫•y chi ti·∫øt s·∫£n ph·∫©m c·ªßa order
  const orderDetails = await OrderDetailService.getOrderDetailByOrderId(order_id);
  const orderProducts = orderDetails && Array.isArray(orderDetails.products) ? orderDetails.products : [];
  let productPriceMap = {};
  let productDiscountMap = {};
  for (const p of orderProducts) {
    productPriceMap[p.product_id] = p.price;
    productDiscountMap[p.product_id] = p.discount || 0;
  }
  // 3. L·∫•y t·∫•t c·∫£ return c·ªßa order n√†y, s·∫Øp x·∫øp theo th·ªùi gian t·∫°o
  const [returnRows] = await db.promise().query(
    `SELECT * FROM return_orders WHERE order_id = ? AND status IN ('approved', 'completed') ORDER BY created_at ASC, return_id ASC`,
    [order_id]
  );
  if (!returnRows || returnRows.length === 0) return 0;

  // 4. Duy·ªát qua t·ª´ng return, x√°c ƒë·ªãnh l·∫ßn cu·ªëi c√πng, ph√¢n b·ªï l·∫°i s·ªë ti·ªÅn ho√†n
  let totalRefund = 0;
  let returnedQuantityMap = {};
  for (const p of orderProducts) returnedQuantityMap[p.product_id] = 0;
  for (let i = 0; i < returnRows.length; i++) {
    const ret = returnRows[i];
    const details = await CustomerReturn.getReturnDetails(ret.return_id);
    for (const d of details) {
      returnedQuantityMap[d.product_id] = (returnedQuantityMap[d.product_id] || 0) + (d.quantity || 0);
    }
    let isFinalReturn = true;
    for (const p of orderProducts) {
      if ((returnedQuantityMap[p.product_id] || 0) < (p.quantity || 0)) {
        isFinalReturn = false;
        break;
      }
    }
    let refundThisTime = 0;
    if (isFinalReturn && i === returnRows.length - 1) {
      refundThisTime = Number(order.final_amount || 0) - totalRefund;
      if (refundThisTime < 0) refundThisTime = 0;
    } else {
      refundThisTime = calculateRefund({
        order,
        returnDetails: details,
        productPriceMap,
        productDiscountMap,
      });
    }
    refundThisTime = Math.round(refundThisTime * 100) / 100;
    // LOG DEBUG CHI TI·∫æT
    console.log('--- Debug Refund ---');
    console.log('Order:', order.order_id, order.order_code);
    console.log('Return:', ret.return_id, ret.created_at);
    console.log('Order Products:', orderProducts);
    console.log('Returned Quantity Map:', returnedQuantityMap);
    console.log('Return Details:', details);
    console.log('Is Final Return:', isFinalReturn);
    console.log('Refund This Time:', refundThisTime);
    console.log('Total Refund So Far:', totalRefund + refundThisTime);
    totalRefund += refundThisTime;
  }
  totalRefund = Math.round(totalRefund * 100) / 100;
  return totalRefund;
}

// Helper: T√≠nh refund cho t·ª´ng l·∫ßn tr·∫£ c·ªßa 1 order
async function calculateRefundForEachReturn(order_id) {
  const db = require("../../config/db.config");
  const OrderModel = require("../orders/order.model");
  const CustomerReturn = require("../customer_return/customer_return.model");
  const OrderDetailService = require("../orderDetails/orderDetail.service");

  // 1. L·∫•y order g·ªëc
  const order = await OrderModel.readById(order_id);
  if (!order) return [];
  const final_amount = Number(order.final_amount || 0);
  const order_amount = Number(order.order_amount || order.discount_amount || 0);

  // 2. L·∫•y chi ti·∫øt s·∫£n ph·∫©m c·ªßa order
  const orderDetails = await OrderDetailService.getOrderDetailByOrderId(order_id);
  const orderProducts = orderDetails && Array.isArray(orderDetails.products) ? orderDetails.products : [];
  let productPriceMap = {};
  let productDiscountMap = {};
  for (const p of orderProducts) {
    productPriceMap[p.product_id] = p.price;
    productDiscountMap[p.product_id] = p.discount || 0;
  }
  // 3. L·∫•y t·∫•t c·∫£ return c·ªßa order n√†y, s·∫Øp x·∫øp theo th·ªùi gian t·∫°o
  const [returnRows] = await db.promise().query(
    `SELECT * FROM return_orders WHERE order_id = ? AND status IN ('approved', 'completed') ORDER BY created_at ASC, return_id ASC`,
    [order_id]
  );
  if (!returnRows || returnRows.length === 0) return [];

  // 4. Duy·ªát qua t·ª´ng return, x√°c ƒë·ªãnh l·∫ßn cu·ªëi c√πng, ph√¢n b·ªï l·∫°i s·ªë ti·ªÅn ho√†n
  let totalRefund = 0;
  let returnedQuantityMap = {};
  for (const p of orderProducts) returnedQuantityMap[p.product_id] = 0;
  const result = [];
  for (let i = 0; i < returnRows.length; i++) {
    const ret = returnRows[i];
    const details = await CustomerReturn.getReturnDetails(ret.return_id);
    for (const d of details) {
      returnedQuantityMap[d.product_id] = (returnedQuantityMap[d.product_id] || 0) + (d.quantity || 0);
    }
    let isFinalReturn = true;
    for (const p of orderProducts) {
      if ((returnedQuantityMap[p.product_id] || 0) < (p.quantity || 0)) {
        isFinalReturn = false;
        break;
      }
    }
    let refundThisTime = 0;
    if (isFinalReturn && i === returnRows.length - 1) {
      refundThisTime = Number(order.final_amount || 0) - totalRefund;
      if (refundThisTime < 0) refundThisTime = 0;
    } else {
      refundThisTime = calculateRefund({
        order,
        returnDetails: details,
        productPriceMap,
        productDiscountMap,
      });
    }
    refundThisTime = Math.round(refundThisTime * 100) / 100;
    // LOG DEBUG CHI TI·∫æT
    console.log('--- Debug Refund (Each Return) ---');
    console.log('Order:', order.order_id, order.order_code);
    console.log('Return:', ret.return_id, ret.created_at);
    console.log('Order Products:', orderProducts);
    console.log('Returned Quantity Map:', returnedQuantityMap);
    console.log('Return Details:', details);
    console.log('Is Final Return:', isFinalReturn);
    console.log('Refund This Time:', refundThisTime);
    console.log('Total Refund So Far:', totalRefund + refundThisTime);
    totalRefund += refundThisTime;
    result.push({
      return_id: ret.return_id,
      refund_amount: refundThisTime,
      created_at: ret.created_at,
      order_id: ret.order_id,
      order_code: order.order_code,
      status: ret.status
    });
  }
  return result;
}

CustomerReportService.calculateOrderTotalRefund = calculateOrderTotalRefund;
module.exports = CustomerReportService;
