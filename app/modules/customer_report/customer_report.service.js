const db = require("../../config/db.config"); // Import tr·ª±c ti·∫øp db instance
const OrderModel = require("../orders/order.model"); // ƒê·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng
const ProductEventModel = require("../product_report/product_event.model"); // ƒê·ªÉ l·∫•y l·ªãch s·ª≠ b√°n/tr·∫£ s·∫£n ph·∫©m
const InvoiceModel = require("../invoice/invoice.model"); // ƒê·ªÉ t√≠nh c√¥ng n·ª£
const TransactionModel = require("../transactions/transaction.model"); // ƒê·ªÉ t√≠nh c√¥ng n·ª£

const CustomerReportService = {
  /**
   * L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng v√† t·ªïng chi ti√™u c·ªßa m·ªôt kh√°ch h√†ng.
   * Ch·ªâ t√≠nh c√°c ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "Ho√†n t·∫•t".
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng ch·ª©a t·ªïng s·ªë ƒë∆°n h√†ng v√† t·ªïng chi ti√™u.
   * V√≠ d·ª•: { total_orders: 5, total_expenditure: 1250000.00 }
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getTotalOrdersAndExpenditure: async (customer_id) => {
    try {
      const sql = `
        SELECT
          COUNT(order_id) AS total_orders,
          COALESCE(SUM(final_amount), 0) AS total_expenditure
        FROM orders
        WHERE customer_id = ? AND order_status = 'Ho√†n t·∫•t';
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);
      return rows[0];
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getTotalOrdersAndExpenditure - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ b√°n h√†ng v√† tr·∫£ h√†ng c·ªßa m·ªôt kh√°ch h√†ng.
   * L·∫•y d·ªØ li·ªáu t·ª´ product_events v√† l·ªçc theo customer_id th√¥ng qua order_id.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c s·ª± ki·ªán b√°n/tr·∫£.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getSalesReturnHistory: async (customer_id) => {
    try {
      // Ch√∫ng ta c·∫ßn JOIN product_events v·ªõi orders ƒë·ªÉ l·∫•y customer_id
      const sql = `
        SELECT
          pe.event_id,
          pe.product_id,
          p.product_name, -- Gi·∫£ ƒë·ªãnh c√≥ b·∫£ng products ƒë·ªÉ JOIN
          pe.quantity_impact,
          pe.transaction_price,
          pe.event_type,
          pe.event_timestamp,
          pe.reference_id AS order_id,
          pe.description,
          pe.current_stock_after
        FROM product_events pe
        JOIN orders o ON pe.reference_id = o.order_id
        LEFT JOIN products p ON pe.product_id = p.product_id -- ƒê·ªÉ l·∫•y t√™n s·∫£n ph·∫©m
        WHERE o.customer_id = ?
        AND pe.reference_type = 'ORDER' -- Ch·ªâ l·∫•y s·ª± ki·ªán li√™n quan ƒë·∫øn ƒë∆°n h√†ng
        AND (pe.event_type = 'ORDER_SOLD' OR pe.event_type = 'ORDER_CANCELLED' OR pe.event_type = 'RETURN_FROM_CUSTOMER')
        ORDER BY pe.event_timestamp DESC;
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);

      // Format l·∫°i event_type cho d·ªÖ ƒë·ªçc
      return rows.map((row) => {
        let displayEventType = row.event_type;
        switch (row.event_type) {
          case "ORDER_SOLD":
            displayEventType = "B√°n h√†ng";
            break;
          case "ORDER_CANCELLED":
            displayEventType = "H·ªßy ƒë∆°n h√†ng"; // Ho·∫∑c 'Ho√†n tr·∫£ kho' n·∫øu n√≥ th·ªÉ hi·ªán vi·ªác ho√†n nh·∫≠p
            break;
          case "RETURN_FROM_CUSTOMER":
            displayEventType = "Kh√°ch h√†ng tr·∫£ h√†ng";
            break;
          // Th√™m c√°c case kh√°c n·∫øu c√≥ th√™m event_type
        }
        return {
          event_id: row.event_id,
          product_id: row.product_id,
          product_name: row.product_name,
          quantity_impact: row.quantity_impact,
          transaction_price: row.transaction_price,
          event_type: displayEventType,
          event_timestamp: row.event_timestamp,
          order_id: row.order_id,
          description: row.description,
          current_stock_after: row.current_stock_after,
        };
      });
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getSalesReturnHistory - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng c·ªßa m·ªôt kh√°ch h√†ng, bao g·ªìm chi ti·∫øt t·ª´ng ƒë∆°n h√†ng.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng ƒë√£ ƒë·ªãnh d·∫°ng.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getOrderHistoryWithDetails: async (customer_id) => {
    try {
      // Gi·∫£ ƒë·ªãnh OrderModel c√≥ h√†m ƒë·ªÉ l·∫•y ƒë∆°n h√†ng k√®m chi ti·∫øt s·∫£n ph·∫©m cho m·ªôt customer_id
      // N·∫øu kh√¥ng, c·∫ßn th√™m h√†m n√†y v√†o OrderModel ho·∫∑c vi·∫øt truy v·∫•n JOIN ph·ª©c t·∫°p ·ªü ƒë√¢y.
      // D·ª±a tr√™n h√†m OrderModel.readById, ch√∫ng ta c√≥ th·ªÉ g·ªçi t·ª´ng ƒë∆°n h√†ng.
      // Tuy nhi√™n, ƒë·ªÉ t·ªëi ∆∞u, t·ªët h∆°n l√† vi·∫øt m·ªôt truy v·∫•n JOIN l·ªõn ·ªü model ho·∫∑c service.
      const sql = `
        SELECT
          o.order_id,
          o.order_code,
          o.order_date,
          o.order_status,
          o.total_amount,
          o.final_amount,
          o.discount_amount,
          o.note,
          o.payment_method,
          o.created_at,
          o.updated_at,
          od.order_detail_id,
          od.product_id,
          p.product_name, -- Gi·∫£ ƒë·ªãnh c√≥ b·∫£ng products ƒë·ªÉ JOIN
          p.sku, -- Gi·∫£ ƒë·ªãnh c√≥ b·∫£ng products ƒë·ªÉ JOIN
          od.quantity,
          od.price
        FROM orders o
        JOIN order_details od ON o.order_id = od.order_id
        LEFT JOIN products p ON od.product_id = p.product_id
        WHERE o.customer_id = ?
        ORDER BY o.created_at DESC, od.created_at ASC;
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);

      // Nh√≥m k·∫øt qu·∫£ theo t·ª´ng ƒë∆°n h√†ng
      const ordersMap = new Map();
      rows.forEach((row) => {
        if (!ordersMap.has(row.order_id)) {
          ordersMap.set(row.order_id, {
            order_id: row.order_id,
            order_code: row.order_code,
            order_date: row.order_date,
            order_status: row.order_status,
            total_amount: row.total_amount,
            final_amount: row.final_amount,
            discount_amount: row.discount_amount,
            note: row.note,
            payment_method: row.payment_method,
            created_at: row.created_at,
            updated_at: row.updated_at,
            details: [],
          });
        }
        ordersMap.get(row.order_id).details.push({
          order_detail_id: row.order_detail_id,
          product_id: row.product_id,
          product_name: row.product_name,
          sku: row.sku,
          quantity: row.quantity,
          price: row.price,
        });
      });

      return Array.from(ordersMap.values());
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getOrderHistoryWithDetails - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * T√≠nh to√°n t·ªïng c√¥ng n·ª£ c·∫ßn thu t·ª´ m·ªôt kh√°ch h√†ng.
   * C√¥ng n·ª£ ƒë∆∞·ª£c t√≠nh b·∫±ng t·ªïng c√°c h√≥a ƒë∆°n ch∆∞a thanh to√°n.
   *
   * @param {string} customer_id - ID c·ªßa kh√°ch h√†ng.
   * @returns {Promise<number>} Promise gi·∫£i quy·∫øt v·ªõi t·ªïng c√¥ng n·ª£.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getReceivables: async (customer_id) => {
    try {
      const sql = `
        SELECT
          COALESCE(SUM(final_amount - amount_paid), 0) AS total_receivables
        FROM invoices
        WHERE customer_id = ?
          AND (status = 'pending' OR status = 'partial_paid' OR status = 'overdue'); -- Ho·∫∑c c√°c tr·∫°ng th√°i kh√°c bi·ªÉu th·ªã ch∆∞a thanh to√°n ƒë·ªß
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);
      return rows[0].total_receivables;
    } catch (error) {
      console.error("üöÄ ~ CustomerReportService: getReceivables - L·ªói:", error);
      throw error;
    }
  },

  getUnpaidOrPartiallyPaidInvoices: async (customer_id) => {
    try {
      const sql = `
        SELECT
          invoice_id,
          invoice_code,
          invoice_type,
          order_id,
          final_amount,
          amount_paid,
          (final_amount - amount_paid) AS remaining_receivable,
          status,
          issued_date,
          due_date,
          note
        FROM invoices
        WHERE customer_id = ?
          AND (status = 'pending' OR status = 'partial_paid' OR status = 'overdue')
        ORDER BY issued_date ASC;
      `;
      const [rows] = await db.promise().query(sql, [customer_id]);
      return rows;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getUnpaidOrPartiallyPaidInvoices - L·ªói:",
        error
      );
      throw error;
    }
  },

  getCustomerFinancialLedger: async (customer_id) => {
    try {
      // 1. L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n b√°n h√†ng c·ªßa kh√°ch h√†ng
      const invoices = await InvoiceModel.getAllByCustomerId(customer_id); // Gi·∫£ ƒë·ªãnh InvoiceModel c√≥ h√†m getAllByCustomerId
      const mappedInvoices = invoices.map((inv) => ({
        reference_code: inv.invoice_code,
        timestamp: inv.issued_date,
        entry_type: "Sale Invoice", // Ho·∫∑c 'Credit Note' n·∫øu c√≥ lo·∫°i ƒë√≥
        debit_amount: parseFloat(inv.final_amount),
        credit_amount: 0,
        description: `H√≥a ƒë∆°n b√°n h√†ng: ${inv.invoice_code}`,
        invoice_id: inv.invoice_id,
        related_id: inv.order_id, // N·∫øu mu·ªën li√™n k·∫øt v·ªõi order
      }));

      // 2. L·∫•y t·∫•t c·∫£ giao d·ªãch thu ti·ªÅn/ho√†n ti·ªÅn c·ªßa kh√°ch h√†ng
      // Th√™m category 'sale_refund' n·∫øu c√≥
      const transactions = await TransactionModel.getTransactionsByCustomerId(
        customer_id
      ); // H√†m n√†y ƒë√£ c√≥ trong TransactionModel
      const mappedTransactions = transactions.map((trx) => {
        let entryType;
        let debit = 0;
        let credit = 0;
        let description = trx.description;

        switch (trx.type) {
          case "receipt":
            entryType = "Payment Received";
            credit = parseFloat(trx.amount);
            description = `Phi·∫øu thu: ${trx.transaction_code}`;
            if (trx.related_type === "invoice" && trx.invoice_code) {
              description += ` (Hƒê: ${trx.invoice_code})`;
            }
            break;
          case "refund": // Gi·∫£ ƒë·ªãnh refund l√† kho·∫£n chi tr·∫£ cho kh√°ch h√†ng
            entryType = "Refund Issued";
            debit = parseFloat(trx.amount); // Refund c√≥ th·ªÉ coi l√† gi·∫£m c√¥ng n·ª£ cho m√¨nh -> tƒÉng n·ª£ kh√°ch h√†ng (n·∫øu ti·ªÅn ra kh·ªèi m√¨nh)
            description = `Ho√†n ti·ªÅn: ${trx.transaction_code}`;
            break;
          // C√≥ th·ªÉ th√™m c√°c lo·∫°i giao d·ªãch kh√°c nh∆∞ adjustment (ƒëi·ªÅu ch·ªânh)
          default:
            entryType = "Other Transaction";
            break;
        }

        return {
          reference_code: trx.transaction_code,
          timestamp: trx.created_at,
          entry_type: entryType,
          debit_amount: debit,
          credit_amount: credit,
          description: description,
          transaction_id: trx.transaction_id,
          related_id: trx.related_id, // ID c·ªßa h√≥a ƒë∆°n ho·∫∑c order li√™n quan
        };
      });

      // 3. K·∫øt h·ª£p v√† s·∫Øp x·∫øp theo th·ªùi gian
      const combinedEntries = [...mappedInvoices, ...mappedTransactions];
      combinedEntries.sort(
        (a, b) => new Date(a.timestamp) - new Date(b.timestamp)
      );

      // 4. T√≠nh to√°n running balance
      let currentRunningBalance = 0;
      const ledger = combinedEntries.map((entry) => {
        // H√≥a ƒë∆°n b√°n h√†ng l√†m tƒÉng c√¥ng n·ª£ kh√°ch h√†ng (Debits Receivable)
        // Thanh to√°n / Ho√†n ti·ªÅn l√†m gi·∫£m c√¥ng n·ª£ kh√°ch h√†ng (Credits Receivable)
        currentRunningBalance += entry.debit_amount - entry.credit_amount;
        return {
          ...entry,
          running_balance: parseFloat(currentRunningBalance.toFixed(2)), // ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n
        };
      });

      return ledger;
    } catch (error) {
      console.error(
        "üöÄ ~ CustomerReportService: getCustomerFinancialLedger - L·ªói:",
        error
      );
      throw error;
    }
  },
};

module.exports = CustomerReportService;
