const db = require("../../config/db.config");
const { v4: uuidv4 } = require("uuid");

const InventoryModel = {
  /**
   * X√°c nh·∫≠n ƒë·∫∑t ch·ªó t·ªìn kho, gi·∫£m s·ªë l∆∞·ª£ng v√† t·ªìn kho t·∫°m gi·ªØ.
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {number} quantity - S·ªë l∆∞·ª£ng c·∫ßn x√°c nh·∫≠n.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n ho·∫∑c t·ª´ ch·ªëi n·∫øu kh√¥ng ƒë·ªß h√†ng.
   */
  confirmReservation: (product_id, warehouse_id, quantity) => {
    return new Promise((resolve, reject) => {
      const sql = `
        UPDATE inventories
        SET
          quantity = quantity - ?,
          reserved_stock = reserved_stock - ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ? 
      `;
      // --available_stock = available_stock - ?,
      // AND reserved_stock >= ? AND quantity >= ?
      // Xo√° 2 quantity ·ªü trong array values
      // const values = [
      //   quantity,
      //   quantity,
      //   quantity,
      //   quantity,
      //   product_id,
      //   warehouse_id,
      //   quantity,
      //   quantity,
      // ];

      const values = [quantity, quantity, product_id, warehouse_id];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: confirmReservation - Error confirming reservation:",
            err
          );
          return reject(err);
        }
        // Uncomment kh√¥ng cho b√°n h√†ng √¢m kho
        // if (result.affectedRows === 0) {
        //   return reject(new Error("Kh√¥ng ƒë·ªß h√†ng trong kho ho·∫∑c h√†ng t·∫°m gi·ªØ"));
        // }
        resolve(result);
      });
    });
  },

  /**
   * T√¨m ki·∫øm t·ªìn kho theo ID s·∫£n ph·∫©m v√† ID kho.
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng t·ªìn kho ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  findByProductAndWarehouse: (product_id, warehouse_id) => {
    return new Promise((resolve, reject) => {
      const sql =
        "SELECT product_id, warehouse_id, SUM(quantity) AS quantity FROM inventories WHERE product_id = ? AND warehouse_id = ? GROUP BY product_id, warehouse_id";
      db.query(sql, [product_id, warehouse_id], (err, results) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: findByProductAndWarehouse - Error:",
            err
          );
          return reject(err);
        }
        resolve(results && results.length ? results[0] : null);
      });
    });
  },



  /**
   * T·∫°o m·ªôt b·∫£n ghi t·ªìn kho m·ªõi.
   * @param {Object} data - D·ªØ li·ªáu t·ªìn kho (inventory_id, product_id, warehouse_id, quantity).
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  create: ({ inventory_id, product_id, warehouse_id, quantity }) => {
    return new Promise((resolve, reject) => {
      const sql =
        "INSERT INTO inventories (inventory_id, product_id, warehouse_id, quantity, available_stock ) VALUES (?, ?, ?, ?, ?)";
      db.query(
        sql,
        [inventory_id, product_id, warehouse_id, quantity, quantity],
        (err, result) => {
          if (err) {
            console.error(
              "üöÄ ~ inventory.model.js: create - Error creating inventory:",
              err
            );
            return reject(err);
          }
          resolve(result);
        }
      );
    });
  },

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho (th√™m v√†o).
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {number} quantity - S·ªë l∆∞·ª£ng c·∫ßn th√™m.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  update: (product_id, warehouse_id, quantity) => {
    return new Promise((resolve, reject) => {
      const sql = `UPDATE inventories
        SET 
          quantity = quantity + ?, 
          available_stock = available_stock + ?, 
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ?`;

      db.query(
        sql,
        [quantity, quantity, product_id, warehouse_id],
        (err, result) => {
          if (err) {
            console.error(
              "üöÄ ~ inventory.model.js: update - Error updating inventory:",
              err
            );
            return reject(err);
          }
          resolve(result);
        }
      );
    });
  },

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng, t·ªìn kho ƒë·∫∑t tr∆∞·ªõc v√† t·ªìn kho kh·∫£ d·ª•ng.
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {Object} deltas - C√°c thay ƒë·ªïi (quantityDelta, reservedDelta, availableDelta).
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  updateQuantity: (
    product_id,
    warehouse_id,
    { quantityDelta = 0, reservedDelta = 0, availableDelta = 0 }
  ) => {
    return new Promise((resolve, reject) => {
      const sql = `
        UPDATE inventories
        SET
          quantity = quantity + ?,
          reserved_stock = reserved_stock + ?,
          available_stock = available_stock + ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ?
      `;

      const values = [
        quantityDelta,
        reservedDelta,
        availableDelta,
        product_id,
        warehouse_id,
      ];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: updateQuantity - Error updating quantity fields:",
            err
          );
          return reject(err);
        }
        resolve(result);
      });
    });
  },

  /**
   * L·∫•y t·∫•t c·∫£ c√°c b·∫£n ghi t·ªìn kho v·ªõi th√¥ng tin s·∫£n ph·∫©m, kho v√† danh m·ª•c li√™n quan (c√≥ th·ªÉ ph√¢n trang).
   * @param {number|null} skip - S·ªë b·∫£n ghi b·ªè qua (offset).
   * @param {number|null} limit - S·ªë b·∫£n ghi l·∫•y v·ªÅ.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng t·ªìn kho ƒë√£ ƒë·ªãnh d·∫°ng.
   */
  findAll: (skip = null, limit = null) => {
    return new Promise((resolve, reject) => {
      let sql = `
        SELECT
          i.inventory_id,
          i.quantity,
          i.created_at,
          i.updated_at,
          i.reserved_stock,
          i.available_stock,
          p.*,
          c.category_name,
          w.warehouse_id AS warehouse_id,
          w.warehouse_name
        FROM inventories i
        JOIN products p ON i.product_id = p.product_id
        JOIN warehouses w ON i.warehouse_id = w.warehouse_id
        LEFT JOIN categories c ON p.category_id = c.category_id
      `;
      const params = [];
      if (limit !== null && skip !== null) {
        sql += ' LIMIT ? OFFSET ?';
        params.push(limit, skip);
      }
      db.query(sql, params, (err, results) => {
        if (err) {
          //console.error("üöÄ ~ inventory.model.js: findAll - Error:", err);
          return reject(err);
        }
        const formattedResults = results.map((row) => ({
          inventory_id: row.inventory_id,
          created_at: row.created_at,
          updated_at: row.updated_at,
          product: {
            product_id: row.product_id,
            sku: row.sku,
            product_image: row.product_image,
            product_name: row.product_name,
            product_retail_price: row.product_retail_price,
            quantity: row.quantity,
            reserved_stock: row.reserved_stock,
            available_stock: row.available_stock,
            category: row.category_id
              ? {
                  category_id: row.category_id,
                  category_name: row.category_name,
                }
              : null,
          },
          warehouse: {
            warehouse_id: row.warehouse_id,
            warehouse_name: row.warehouse_name,
          },
        }));
        resolve(formattedResults);
      });
    });
  },

  /**
   * T√¨m ki·∫øm t·ªìn kho theo ID t·ªìn kho.
   * @param {string} inventory_id - ID t·ªìn kho.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng t·ªìn kho ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  findById: (inventory_id) => {
    return new Promise((resolve, reject) => {
      db.query(
        "SELECT * FROM inventories WHERE inventory_id = ?",
        [inventory_id],
        (err, results) => {
          if (err) {
            //console.error("üöÄ ~ inventory.model.js: findById - Error:", err);
            return reject(err);
          }
          resolve(results && results.length ? results[0] : null);
        }
      );
    });
  },

  /**
   * X√≥a m·ªôt b·∫£n ghi t·ªìn kho theo ID.
   * @param {string} inventory_id - ID t·ªìn kho.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  deleteById: (inventory_id) => {
    return new Promise((resolve, reject) => {
      db.query(
        "DELETE FROM inventories WHERE inventory_id = ?",
        [inventory_id],
        (err, result) => {
          if (err) {
            //console.error("üöÄ ~ inventory.model.js: deleteById - Error:", err);
            return reject(err);
          }
          resolve(result);
        }
      );
    });
  },

  /**
   * L·∫•y t·ªìn kho theo ID kho, nh√≥m theo s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng t·ªìn kho ƒë√£ nh√≥m.
   */
  findByWareHouseId: (warehouse_id) => {
    return new Promise((resolve, reject) => {
      const sql = `
        SELECT
          i.product_id,
          i.inventory_id,
          i.created_at,
          i.updated_at,
          p.*,
          c.category_name,
          SUM(i.quantity) AS total_quantity,
          SUM(i.available_stock) AS available_quantity,
          SUM(i.reserved_stock) AS reserved_quantity,
          w.warehouse_id AS warehouse_id,
          w.warehouse_name
        FROM inventories i
        JOIN products p ON i.product_id = p.product_id
        JOIN warehouses w ON i.warehouse_id = w.warehouse_id
        LEFT JOIN categories c ON p.category_id = c.category_id
        WHERE i.warehouse_id = ?
        GROUP BY i.product_id, p.product_name
        ORDER BY p.product_name ASC
      `;
      db.query(sql, [warehouse_id], (err, results) => {
        if (err) {
          console.error(
            "[Inventory.findByWareHouseId] L·ªói khi truy v·∫•n:",
            err.message
          );
          return reject(err);
        }
        const formattedResults = results.map((row) => ({
          inventory_id: row.inventory_id,
          created_at: row.created_at,
          updated_at: row.updated_at,
          product: {
            product_id: row.product_id,
            sku: row.sku,
            product_image: row.product_image,
            product_name: row.product_name,
            product_retail_price: row.product_retail_price,
            total_quantity: row.total_quantity,
            reserved_quantity: row.reserved_quantity,
            available_quantity: row.available_quantity,
            category: row.category_id
              ? {
                  category_id: row.category_id,
                  category_name: row.category_name,
                }
              : null,
          },
          warehouse: {
            warehouse_id: row.warehouse_id,
            warehouse_name: row.warehouse_name,
          },
        }));
        resolve(formattedResults);
      });
    });
  },

  /**
   * C·∫≠p nh·∫≠t t·ªìn kho ƒë·∫∑t tr∆∞·ªõc v√† t·ªìn kho kh·∫£ d·ª•ng.
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {number} reservedDelta - Thay ƒë·ªïi t·ªìn kho ƒë·∫∑t tr∆∞·ªõc.
   * @param {number} availableDelta - Thay ƒë·ªïi t·ªìn kho kh·∫£ d·ª•ng.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  updateReservedAndAvailable: (
    product_id,
    warehouse_id,
    reservedDelta,
    availableDelta
  ) => {
    return new Promise((resolve, reject) => {
      const query = `
        UPDATE inventories
        SET
          reserved_stock = reserved_stock + ?,
          available_stock = available_stock + ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ?
      `;
      db.query(
        query,
        [reservedDelta, availableDelta, product_id, warehouse_id],
        (err, result) => {
          if (err) {
            console.error(
              "üöÄ ~ inventory.model.js: updateReservedAndAvailable - Error:",
              err
            );
            return reject(err);
          }
          resolve(result);
        }
      );
    });
  },

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho (ch·ªâ quantity v√† available_stock).
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {number} quantityDelta - Thay ƒë·ªïi s·ªë l∆∞·ª£ng.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  updateQuantitySimple: (product_id, warehouse_id, quantityDelta) => {
    return new Promise((resolve, reject) => {
      const query = `
        UPDATE inventories
        SET
          quantity = quantity + ?,
          available_stock = available_stock + ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ?
      `;
      db.query(
        query,
        [quantityDelta, quantityDelta, product_id, warehouse_id],
        (err, result) => {
          if (err) {
            console.error(
              "üöÄ ~ inventory.model.js: updateQuantitySimple - Error:",
              err
            );
            return reject(err);
          }
          resolve(result);
        }
      );
    });
  },

  /**
   * H√†m t·ªïng qu√°t ƒë·ªÉ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng t·ªìn kho.
   * (ƒê√¢y l√† h√†m ƒë√£ c√≥ s·∫µn trong code g·ªëc c·ªßa b·∫°n, ƒë∆∞·ª£c ƒë·ªïi t√™n th√†nh updateInventoryFields ƒë·ªÉ r√µ r√†ng h∆°n)
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID kho.
   * @param {Object} deltas - C√°c thay ƒë·ªïi (quantityDelta, reservedDelta, availableDelta).
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  updateInventoryFields: (
    product_id,
    warehouse_id,
    { quantityDelta = 0, reservedDelta = 0, availableDelta = 0 }
  ) => {
    return new Promise((resolve, reject) => {
      const sql = `
        UPDATE inventories
        SET
          quantity = quantity + ?,
          reserved_stock = reserved_stock + ?,
          available_stock = available_stock + ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE product_id = ? AND warehouse_id = ?
      `;

      const values = [
        quantityDelta,
        reservedDelta,
        availableDelta,
        product_id,
        warehouse_id,
      ];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: updateInventoryFields - Error:",
            err
          );
          return reject(err);
        }
        resolve(result);
      });
    });
  },

  decreaseQuantityAndAvailableStock: (product_id, warehouse_id, quantity) => {
    return new Promise((resolve, reject) => {
      const sql = `
        UPDATE inventories
        SET
          quantity = quantity - ?,
          available_stock = available_stock - ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE
          product_id = ? AND warehouse_id = ?
      `;

      // const sql = `
      //   UPDATE inventories
      //   SET
      //     quantity = quantity - ?,
      //     available_stock = available_stock - ?,
      //     updated_at = CURRENT_TIMESTAMP
      //   WHERE
      //     product_id = ? AND warehouse_id = ?
      //     AND quantity >= ? -- ƒê·∫£m b·∫£o t·ªïng s·ªë l∆∞·ª£ng kh√¥ng √¢m
      //     AND available_stock >= ? -- ƒê·∫£m b·∫£o t·ªìn kho kh·∫£ d·ª•ng kh√¥ng √¢m (ho·∫∑c nh·ªè h∆°n reserved)
      // `;

      // Gi√° tr·ªã quantityToSubtract ƒë∆∞·ª£c truy·ªÅn v√†o c·∫£ 2 tham s·ªë.
      // C√°c ? cu·ªëi c√πng l√† ƒë·ªÉ ƒë·∫£m b·∫£o ƒëi·ªÅu ki·ªán WHERE (quantity >= quantityToSubtract v√† available_stock >= quantityToSubtract)
      const values = [quantity, quantity, product_id, warehouse_id]; 
      //quantity, check for quantity >= quantityToSubtract
      // quantity, check for available_stock >= quantityToSubtract

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: decreaseQuantityAndAvailableStock - Error updating inventory:",
            err
          );
          return reject(err);
        }
        if (result.affectedRows === 0) {
          return reject(
            new Error("Kh√¥ng ƒë·ªß t·ªìn kho ƒë·ªÉ gi·∫£m ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
          );
        }
        resolve(result);
      });
    });
  },

  recordAdjustment: ({
    product_id,
    warehouse_id,
    quantity_changed,
    adjustment_type,
    reason,
    adjusted_by,
    current_quantity_before = null,
    current_quantity_after = null,
  }) => {
    return new Promise((resolve, reject) => {
      const adjustment_id = uuidv4(); // T·∫°o UUID cho b·∫£n ghi l·ªãch s·ª≠

      const sql = `
        INSERT INTO inventory_adjustments (
          adjustment_id, product_id, warehouse_id, adjustment_type,
          quantity_changed, current_quantity_before, current_quantity_after,
          reason, adjusted_by, adjustment_date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
      `;

      const values = [
        adjustment_id,
        product_id,
        warehouse_id,
        adjustment_type,
        quantity_changed,
        current_quantity_before,
        current_quantity_after,
        reason,
        adjusted_by,
      ];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: recordAdjustment - Error recording adjustment:",
            err
          );
          return reject(err);
        }
        resolve({ ...result, adjustment_id }); // Tr·∫£ v·ªÅ c·∫£ result v√† adjustment_id
      });
    });
  },

  getTotalStockByProductId: (product_id) => {
    return new Promise((resolve, reject) => {
      const sql = `
        SELECT COALESCE(SUM(quantity), 0) AS total_stock
        FROM inventories
        WHERE product_id = ?;
      `;
      db.query(sql, [product_id], (err, results) => {
        if (err) {
          console.error(
            "üöÄ ~ inventory.model.js: getTotalStockByProductId - Error:",
            err
          );
          return reject(err);
        }
        // Tr·∫£ v·ªÅ t·ªïng s·ªë l∆∞·ª£ng ho·∫∑c 0 n·∫øu kh√¥ng c√≥ b·∫£n ghi n√†o
        resolve(results && results.length ? results[0].total_stock : 0);
      });
    });
  },

  /**
   * ƒê·∫øm t·ªïng s·ªë b·∫£n ghi t·ªìn kho (cho ph√¢n trang).
   * @returns {Promise<number>} T·ªïng s·ªë b·∫£n ghi t·ªìn kho.
   */
  countAll: () => {
    return new Promise((resolve, reject) => {
      const sql = `SELECT COUNT(*) AS total FROM inventories`;
      db.query(sql, (err, results) => {
        if (err) {
          //console.error("üöÄ ~ inventory.model.js: countAll - Error:", err);
          return reject(err);
        }
        resolve(results && results.length ? results[0].total : 0);
      });
    });
  },

  /**
   * L·∫•y t·ªìn kho theo ID kho, nh√≥m theo s·∫£n ph·∫©m, c√≥ ph√¢n trang.
   * @param {string} warehouse_id - ID kho.
   * @param {number} skip - S·ªë b·∫£n ghi b·ªè qua.
   * @param {number} limit - S·ªë b·∫£n ghi l·∫•y v·ªÅ.
   * @returns {Promise<Array<Object>>}
   */
  findByWareHouseIdWithPagination: (warehouse_id, skip, limit) => {
    return new Promise((resolve, reject) => {
      const sql = `
        SELECT
          i.product_id,
          i.inventory_id,
          i.created_at,
          i.updated_at,
          p.*,
          c.category_name,
          SUM(i.quantity) AS total_quantity,
          SUM(i.available_stock) AS available_quantity,
          SUM(i.reserved_stock) AS reserved_quantity,
          w.warehouse_id AS warehouse_id,
          w.warehouse_name
        FROM inventories i
        JOIN products p ON i.product_id = p.product_id
        JOIN warehouses w ON i.warehouse_id = w.warehouse_id
        LEFT JOIN categories c ON p.category_id = c.category_id
        WHERE i.warehouse_id = ?
        GROUP BY i.product_id, p.product_name
        ORDER BY p.product_name ASC
        LIMIT ? OFFSET ?
      `;
      db.query(sql, [warehouse_id, limit, skip], (err, results) => {
        if (err) {
          //console.error("[Inventory.findByWareHouseIdWithPagination] L·ªói khi truy v·∫•n:", err.message);
          return reject(err);
        }
        const formattedResults = results.map((row) => ({
          inventory_id: row.inventory_id,
          created_at: row.created_at,
          updated_at: row.updated_at,
          product: {
            product_id: row.product_id,
            sku: row.sku,
            product_image: row.product_image,
            product_name: row.product_name,
            product_retail_price: row.product_retail_price,
            total_quantity: row.total_quantity,
            reserved_quantity: row.reserved_quantity,
            available_quantity: row.available_quantity,
            category: row.category_id
              ? {
                  category_id: row.category_id,
                  category_name: row.category_name,
                }
              : null,
          },
          warehouse: {
            warehouse_id: row.warehouse_id,
            warehouse_name: row.warehouse_name,
          },
        }));
        resolve(formattedResults);
      });
    });
  },

  /**
   * ƒê·∫øm t·ªïng s·ªë b·∫£n ghi t·ªìn kho theo warehouse_id (cho ph√¢n trang).
   * @param {string} warehouse_id
   * @returns {Promise<number>}
   */
  countByWareHouseId: (warehouse_id) => {
    return new Promise((resolve, reject) => {
      const sql = `SELECT COUNT(DISTINCT product_id) AS total FROM inventories WHERE warehouse_id = ?`;
      db.query(sql, [warehouse_id], (err, results) => {
        if (err) {
          //console.error("üöÄ ~ inventory.model.js: countByWareHouseId - Error:", err);
          return reject(err);
        }
        resolve(results && results.length ? results[0].total : 0);
      });
    });
  },
};

module.exports = InventoryModel;
