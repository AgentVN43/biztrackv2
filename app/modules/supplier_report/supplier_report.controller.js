const TransactionService = require("../transactions/transaction.service");
const TransactionModel = require("../transactions/transaction.model");
const { createResponse, errorResponse } = require("../../utils/response");
const SupplierReportService = require("./supplier_report.service");

const SupplierReportController = {
  /**
   * L·∫•y s·ªï c√°i giao d·ªãch chi ti·∫øt c·ªßa nh√† cung c·∫•p
   * Hi·ªÉn th·ªã t·∫•t c·∫£ giao d·ªãch theo th·ª© t·ª± th·ªùi gian v·ªõi d∆∞ n·ª£
   * GET /api/suppliers/:id/transaction-ledger
   */
  getSupplierTransactionLedger: async (req, res, next) => {
    const supplier_id = req.params.id;
    try {
      const ledger = await SupplierReportService.getSupplierTransactionLedger(
        supplier_id
      );
      
      // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ 404 ƒë·ªÉ tr√°nh loop ·ªü frontend
      createResponse(
        res,
        200,
        true,
        ledger || [],
        ledger && ledger.length > 0 
          ? "S·ªï c√°i giao d·ªãch c·ªßa nh√† cung c·∫•p ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng."
          : "Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch cho nh√† cung c·∫•p n√†y."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ SupplierReportController: getSupplierTransactionLedger - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng mua c·ªßa m·ªôt nh√† cung c·∫•p, bao g·ªìm chi ti·∫øt t·ª´ng ƒë∆°n h√†ng.
   * GET /api/suppliers/:id/order-history
   */
  getSupplierOrderHistory: async (req, res, next) => {
    const supplier_id = req.params.id;
    try {
      const orderHistory = await SupplierReportService.getSupplierOrderHistoryWithDetails(supplier_id);
      createResponse(
        res,
        200,
        true,
        orderHistory,
        "Supplier order history retrieved successfully."
      );
    } catch (error) {
      console.error(
        "üöÄ ~ supplier_report.controller.js: getSupplierOrderHistory - L·ªói:",
        error
      );
      return errorResponse(res, error.message || "L·ªói server", 500);
    }
  },

  /**
   * T·∫°o giao d·ªãch m·ªõi cho nh√† cung c·∫•p
   * POST /api/suppliers/:supplierId/transaction
   */
  createSupplierTransaction: async (req, res, next) => {
    try {
      const { supplierId } = req.params;
      const { amount, type, description } = req.body;
      if (!amount || !type) {
        return res.status(400).json({ success: false, message: "amount v√† type l√† b·∫Øt bu·ªôc" });
      }
      // type: 'receipt' (phi·∫øu thu), 'payment' (phi·∫øu chi)
      const transaction = await TransactionModel.createTransaction({
        transaction_code: `TXN-${Date.now()}`,
        type,
        amount,
        supplier_id: supplierId,
        description: description || (type === 'receipt' ? 'Phi·∫øu thu' : 'Phi·∫øu chi'),
        status: 'completed',
        created_at: new Date()
      });
      res.status(201).json({ success: true, data: transaction, message: "T·∫°o phi·∫øu th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  },
};

module.exports = SupplierReportController; 