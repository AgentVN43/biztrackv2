const db = require("../../config/db.config");
const TransactionService = require("../transactions/transaction.service");
const InvoiceModel = require("../invoice/invoice.model");
const PurchaseOrderModel = require("../purchaseOrder/purchaseOrder.model");
const SupplierReturn = require("../supplier_return/supplier_return.model");
const { generateTransactionCode } = require("../../utils/transactionUtils");

const SupplierReportService = {
  /**
   * L·∫•y s·ªï c√°i giao d·ªãch chi ti·∫øt c·ªßa nh√† cung c·∫•p
   * Bao g·ªìm t·∫•t c·∫£ giao d·ªãch theo th·ª© t·ª± th·ªùi gian v·ªõi d∆∞ n·ª£
   * @param {string} supplier_id - ID c·ªßa nh√† cung c·∫•p
   * @returns {Array} M·∫£ng c√°c giao d·ªãch v·ªõi d∆∞ n·ª£
   */
  getSupplierTransactionLedger: async (supplier_id, page = 1, limit = 10) => {
    try {
      // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng mua c·ªßa nh√† cung c·∫•p
      const purchaseOrdersSql = `
        SELECT 
          po.po_id,
          po.created_at,
          po.status,
          po.total_amount,
          po.created_at,
          po.updated_at
        FROM purchase_orders po
        WHERE po.supplier_id = ?
        ORDER BY po.created_at ASC
      `;
      const [purchaseOrders] = await db
        .promise()
        .query(purchaseOrdersSql, [supplier_id]);

      // 2. L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n c·ªßa nh√† cung c·∫•p
      const invoicesSql = `
        SELECT 
          invoice_id,
          invoice_code,
          order_id,
          final_amount,
          amount_paid,
          status,
          issued_date,
          created_at,
          updated_at
        FROM invoices 
        WHERE supplier_id = ?
        ORDER BY created_at ASC
      `;
      const [invoices] = await db.promise().query(invoicesSql, [supplier_id]);

      // 3. L·∫•y t·∫•t c·∫£ giao d·ªãch thanh to√°n
      const [directTransactions] = await db
        .promise()
        .query(`SELECT * FROM transactions WHERE supplier_id = ?`, [
          supplier_id,
        ]);

      // L·∫•y transaction li√™n quan ƒë·∫øn invoice c·ªßa supplier
      const supplierInvoiceIds = invoices.map((inv) => inv.invoice_id);
      let invoiceTransactions = [];
      if (supplierInvoiceIds.length > 0) {
        const [rows] = await db
          .promise()
          .query(
            `SELECT * FROM transactions WHERE related_type = 'invoice' AND related_id IN (${supplierInvoiceIds
              .map(() => "?")
              .join(",")})`,
            supplierInvoiceIds
          );
        invoiceTransactions = rows;
      }
      const transactions = [...directTransactions, ...invoiceTransactions];

      // console.log(
      //   "üöÄ ~ getSupplierTransactionLedger: ~ transactions:",
      //   transactions
      // );

      // 3.5. ‚úÖ L·∫•y t·∫•t c·∫£ return_orders ƒë√£ approved/completed
      const returnOrdersSql = `
          SELECT 
            ro.return_id,
            ro.po_id,
            ro.status,
            ro.created_at,
            SUM(roi.refund_amount) as total_refund
          FROM return_orders ro
          JOIN return_order_items roi ON ro.return_id = roi.return_id
          LEFT JOIN purchase_orders po ON ro.po_id = po.po_id
          WHERE ro.supplier_id = ?
            AND ro.type = 'supplier_return'
            AND ro.status IN ('approved', 'completed')
          GROUP BY ro.return_id, ro.po_id, ro.status, ro.created_at
          ORDER BY ro.created_at ASC
        `;
      const [returnOrders] = await db
        .promise()
        .query(returnOrdersSql, [supplier_id]);

      // 4. T·∫°o danh s√°ch giao d·ªãch theo th·ª© t·ª± th·ªùi gian
      const allTransactions = [];

      // X·ª≠ l√Ω t·ª´ng ƒë∆°n h√†ng mua
      purchaseOrders.forEach((po) => {
        // B·ªé QUA ƒê∆†N H√ÄNG B·ªä H·ª¶Y
        if (po.status === "cancelled" || po.status === "Hu·ª∑ ƒë∆°n") return;
        const poDate = new Date(po.created_at);

        // Th√™m ƒë∆°n h√†ng mua ch√≠nh (t·∫°o n·ª£)
        allTransactions.push({
          transaction_code: po.po_id,
          transaction_date: poDate,
          type: "pending",
          amount: parseFloat(po.total_amount),
          description: `T·∫°o ƒë∆°n h√†ng mua ${po.po_id} - ${po.status}`,
          po_id: po.po_id,
          invoice_id: null,
          transaction_id: null,
          purchase_order_code: po.po_id,
          status: po.status,
        });
      });

      // X·ª≠ l√Ω return_orders: m·ªói l·∫ßn tr·∫£ l√† 1 record ri√™ng bi·ªát
      for (const returnOrder of returnOrders) {
        // T√≠nh s·ªë ti·ªÅn refund ƒë√∫ng cho l·∫ßn n√†y
        const refundAmount = parseFloat(returnOrder.total_refund) || 0;
        if (refundAmount > 0) {
          allTransactions.push({
            transaction_code: `TH-PO-${returnOrder.return_id}`,
            transaction_date: new Date(returnOrder.created_at),
            type: "return",
            amount: refundAmount,
            description: `Tr·∫£ h√†ng cho ƒë∆°n h√†ng mua ${returnOrder.po_id} - ${returnOrder.status}`,
            po_id: returnOrder.po_id,
            invoice_id: null,
            transaction_id: null,
            return_id: returnOrder.return_id,
            status: returnOrder.status,
          });
        }
      }

      // Th√™m c√°c giao d·ªãch thanh to√°n ri√™ng l·∫ª (kh√¥ng li√™n quan ƒë·∫øn ƒë∆°n h√†ng c·ª• th·ªÉ)
      transactions.forEach((transaction) => {
        // Ki·ªÉm tra xem giao d·ªãch n√†y c√≥ li√™n quan ƒë·∫øn PO n√†o kh√¥ng
        let isRelatedToPO = false;
        let isCancelled = false;

        // Ki·ªÉm tra tr·ª±c ti·∫øp v·ªõi PO
        if (transaction.related_type === "purchase_order") {
          const relatedPO = purchaseOrders.find(
            (po) => po.po_id === transaction.related_id
          );
          isRelatedToPO = true;
          if (
            relatedPO &&
            (relatedPO.status === "cancelled" || relatedPO.status === "Hu·ª∑ ƒë∆°n")
          ) {
            isCancelled = true;
          }
        }

        // Ki·ªÉm tra th√¥ng qua invoice
        if (transaction.related_type === "invoice") {
          const relatedInvoice = invoices.find(
            (inv) => inv.invoice_id === transaction.related_id
          );
          if (relatedInvoice) {
            if (relatedInvoice.status === "cancelled") {
              isCancelled = true;
            }
            if (
              purchaseOrders.some((po) => po.po_id === relatedInvoice.order_id)
            ) {
              isRelatedToPO = true;
            }
          }
        }

        // B·ªé QUA TRANSACTION LI√äN QUAN ƒê·∫æN ƒê∆†N H√ÄNG/H√ìA ƒê∆†N B·ªä H·ª¶Y
        if (isCancelled) return;

        // Th√™m t·∫•t c·∫£ giao d·ªãch thanh to√°n (bao g·ªìm c·∫£ manual payments)
        allTransactions.push({
          transaction_code: transaction.transaction_code,
          transaction_date: new Date(transaction.created_at),
          type: transaction.type,
          amount: parseFloat(transaction.amount),
          description:
            transaction.description ||
            `Thanh to√°n ${transaction.transaction_code}`,
          po_id:
            transaction.related_type === "purchase_order"
              ? transaction.related_id
              : null,
          invoice_id:
            transaction.related_type === "invoice"
              ? transaction.related_id
              : null,
          transaction_id: transaction.transaction_id,
          status: "completed",
          payment_method: transaction.payment_method,
          is_manual_payment: true, // ƒê√°nh d·∫•u ƒë√¢y l√† thanh to√°n manual
        });
      });

      // 5. S·∫Øp x·∫øp theo th·ªùi gian (t·ª´ m·ªõi ƒë·∫øn c≈©)
      allTransactions.sort((a, b) => a.transaction_date - b.transaction_date);

      // Debug: In ra th·ª© t·ª± giao d·ªãch
      // //console.log("üîç Debug - Th·ª© t·ª± giao d·ªãch sau khi s·∫Øp x·∫øp (m·ªõi ƒë·∫øn c≈©):");
      allTransactions.forEach((t, index) => {
        console.log(
          `${index + 1}. ${t.transaction_code} | ${t.transaction_date} | ${
            t.type
          } | ${t.amount}`
        );
      });

      // L·ªçc b·ªè transaction c√≥ type === 'refund' kh·ªèi allTransactions tr∆∞·ªõc khi mapping
      const allTransactionsNoRefund = allTransactions.filter(
        (txn) => txn.type !== "refund"
      );

      // 6. T√≠nh running balance t·ª´ c≈© ƒë·∫øn m·ªõi
      let runningBalance = 0;

      // Chu·∫©n h√≥a mapping ki·ªÉu giao d·ªãch cho nh√† cung c·∫•p (c√¥ng n·ª£ ph·∫£i tr·∫£)
      // Quy ∆∞·ªõc: tƒÉng balance = tƒÉng ph·∫£i tr·∫£; gi·∫£m balance = gi·∫£m ph·∫£i tr·∫£
      const INCREASE_TYPES = new Set([
        "pending", // PO t·∫°o n·ª£
        "purchase_invoice", // H√≥a ƒë∆°n mua l√†m tƒÉng ph·∫£i tr·∫£
        "debit_note", // Ghi n·ª£ t·ª´ NCC
        "adj_increase", // ƒêi·ªÅu ch·ªânh tƒÉng ph·∫£i tr·∫£
      ]);

      const DECREASE_TYPES = new Set([
        "payment", // Tr·∫£ ti·ªÅn NCC
        "receipt", // Tr∆∞·ªùng h·ª£p nh·∫≠n ti·ªÅn l·∫°i (√≠t g·∫∑p) coi nh∆∞ gi·∫£m ph·∫£i tr·∫£
        "return", // Tr·∫£ h√†ng NCC
        "credit_note", // NCC ghi c√≥ cho m√¨nh
        "refund", // NCC ho√†n l·∫°i
        "transfer", // ƒêi·ªÅu chuy·ªÉn gi·∫£m ph·∫£i tr·∫£
        "partial_paid",
        "refund_invoice",
        "adj_decrease", // ƒêi·ªÅu ch·ªânh gi·∫£m ph·∫£i tr·∫£
      ]);

      const SIGNED_TYPES = new Set([
        "adjustment",
        "opening_balance",
        "adj_migration", // ƒêi·ªÅu ch·ªânh t·ª´ h·ªá th·ªëng c≈©
      ]);

      allTransactionsNoRefund.forEach((txn) => {
        const amount = Number(txn.amount) || 0;
        const type = txn.type;

        if (INCREASE_TYPES.has(type)) {
          runningBalance += amount;
        } else if (DECREASE_TYPES.has(type)) {
          runningBalance -= amount;
        } else if (SIGNED_TYPES.has(type)) {
          runningBalance += amount; // amount c√≥ th·ªÉ √¢m/d∆∞∆°ng
        } else {
          //console.warn("‚ö†Ô∏è Supplier ledger: Transaction type l·∫°:", type, txn);
          runningBalance += amount; // fallback
        }

        txn.balance = runningBalance;
      });

      // 8. ƒê·∫£o ng∆∞·ª£c l·∫°i ƒë·ªÉ tr·∫£ v·ªÅ t·ª´ m·ªõi ƒë·∫øn c≈©
      allTransactionsNoRefund.reverse();
      // 7. T√≠nh total + ph√¢n trang
      const total = allTransactionsNoRefund.length;
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginated = allTransactionsNoRefund.slice(startIndex, endIndex);
      return { ledger: paginated, total };
    } catch (error) {
      console.error(
        "üöÄ ~ SupplierReportService: getSupplierTransactionLedger - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng mua c·ªßa m·ªôt nh√† cung c·∫•p.
   * Tr·∫£ v·ªÅ c·∫£ ƒë∆°n h√†ng mua v√† ƒë∆°n tr·∫£ h√†ng nh∆∞ c√°c s·ª± ki·ªán ri√™ng bi·ªát.
   *
   * @param {string} supplier_id - ID c·ªßa nh√† cung c·∫•p.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·∫£ng c√°c s·ª± ki·ªán ƒë√£ ƒë·ªãnh d·∫°ng.
   * @throws {Error} N·∫øu c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n database.
   */
  getSupplierOrderHistoryWithDetails: async (
    supplier_id,
    page = 1,
    limit = 10
  ) => {
    try {
      const result = [];

      // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng mua
      const purchaseOrderSql = `
        SELECT
          po.po_id,
          po.created_at as order_date,
          po.status as order_status,
          po.total_amount,
          po.note,
          po.created_at,
          po.updated_at,
          s.supplier_name
        FROM purchase_orders po
        JOIN suppliers s ON po.supplier_id = s.supplier_id
        WHERE po.supplier_id = ?
        ORDER BY po.created_at DESC;
      `;
      const [purchaseOrders] = await db
        .promise()
        .query(purchaseOrderSql, [supplier_id]);

      // 2. L·∫•y t·∫•t c·∫£ ƒë∆°n tr·∫£ h√†ng cho nh√† cung c·∫•p v·ªõi t·ªïng gi√° tr·ªã t·ª´ items
      const supplierReturnSql = `
        SELECT
          r.return_id,
          r.po_id as purchase_order_id,
          r.status as return_status,
          r.created_at as return_created_at,
          r.note as return_note,
          r.po_id as related_order_code,
          COALESCE(SUM(roi.refund_amount), 0) as total_value
        FROM return_orders r
        LEFT JOIN purchase_orders po ON r.po_id = po.po_id
        LEFT JOIN return_order_items roi ON r.return_id = roi.return_id
        WHERE r.supplier_id = ?
          AND r.type = 'supplier_return'
          AND r.status IN ('approved', 'completed')
        GROUP BY r.return_id, r.po_id, r.status, r.created_at, r.note
        ORDER BY r.created_at ASC;
      `;
      const [supplierReturns] = await db
        .promise()
        .query(supplierReturnSql, [supplier_id]);

      // 3. Th√™m c√°c ƒë∆°n h√†ng mua v√†o k·∫øt qu·∫£
      purchaseOrders.forEach((order) => {
        result.push({
          order_id: order.po_id,
          order_code: `PO-${order.po_id.substring(0, 8)}`, // T·∫°o m√£ t·ª´ po_id
          order_date: order.order_date,
          order_status: order.order_status,
          total_amount: order.total_amount,
          final_amount: order.total_amount, // S·ª≠ d·ª•ng total_amount thay v√¨ final_amount
          note: order.note,
          created_at: order.created_at,
          updated_at: order.updated_at,
          supplier_name: order.supplier_name,
          // Th√¥ng tin b·ªï sung ƒë·ªÉ ph√¢n bi·ªát v·ªõi return
          type: "purchase_order",
          related_order_code: null,
          return_count: 0,
          has_returns: false,
          total_refund: 0,
          final_amount_after_returns: parseFloat(order.total_amount), // S·ª≠ d·ª•ng total_amount
        });
      });

      // 4. Th√™m c√°c ƒë∆°n tr·∫£ h√†ng v√†o k·∫øt qu·∫£ (m·ªói l·∫ßn tr·∫£ l√† 1 record ri√™ng bi·ªát)
      supplierReturns.forEach((ret) => {
        result.push({
          order_id: ret.return_id, // S·ª≠ d·ª•ng return_id l√†m order_id ƒë·ªÉ t∆∞∆°ng th√≠ch
          order_code: `TH-${
            ret.related_order_code
              ? ret.related_order_code.substring(0, 8)
              : ret.return_id.substring(0, 8)
          }`, // T·∫°o m√£ t·ª´ po_id ho·∫∑c return_id
          order_date: ret.return_created_at,
          order_status: ret.return_status,
          total_amount: parseFloat(ret.total_value || 0), // S·ª≠ d·ª•ng total_value t·ª´ return_order_items
          final_amount: parseFloat(ret.total_value || 0), // S·ª≠ d·ª•ng total_value t·ª´ return_order_items
          note: ret.return_note,
          created_at: ret.return_created_at,
          updated_at: ret.return_created_at,
          supplier_name: null, // Kh√¥ng c·∫ßn supplier_name cho return
          // Th√¥ng tin b·ªï sung ƒë·ªÉ ph√¢n bi·ªát v·ªõi order th·∫≠t
          type: "supplier_return",
          related_order_code: ret.related_order_code,
          return_count: 0,
          has_returns: true,
          total_refund: parseFloat(ret.total_value || 0), // S·ª≠ d·ª•ng total_value t·ª´ return_order_items
          final_amount_after_returns: 0,
        });
      });

      // 5. S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
      result.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

      // 7. T√≠nh total + ph√¢n trang
      const total = result.length;
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginated = result.slice(startIndex, endIndex);

      return { orderHistory: paginated, total };
    } catch (error) {
      console.error(
        "üöÄ ~ SupplierReportService: getSupplierOrderHistoryWithDetails - L·ªói:",
        error
      );
      throw error;
    }
  },

  /**
   * L·∫•y danh s√°ch h√≥a ƒë∆°n ch∆∞a thanh to√°n ƒë·ªß c·ªßa nh√† cung c·∫•p
   * @param {string} supplier_id
   * @returns {Promise<Array>} Danh s√°ch h√≥a ƒë∆°n ch∆∞a thanh to√°n ƒë·ªß
   */
  getUnpaidOrPartiallyPaidInvoices: async (supplier_id) => {
    try {
      // Gi·∫£ ƒë·ªãnh b·∫£ng invoices c√≥ c√°c tr∆∞·ªùng: supplier_id, status, final_amount, amount_paid
      // L·∫•y c√°c h√≥a ƒë∆°n ch∆∞a thanh to√°n ƒë·ªß (status != 'paid' ho·∫∑c amount_paid < final_amount)
      const sql = `
        SELECT invoice_id, invoice_code, final_amount, amount_paid,
          (final_amount - IFNULL(amount_paid, 0)) AS amount_due, issued_date, due_date, status
        FROM invoices
        WHERE supplier_id = ?
          AND invoice_type != 'refund_invoice'
          AND (status != 'paid' OR (final_amount - IFNULL(amount_paid, 0)) > 0.0001)
        ORDER BY issued_date ASC
      `;
      const [rows] = await db.promise().query(sql, [supplier_id]);
      // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë l√† number
      return rows.map((inv) => ({
        ...inv,
        final_amount:
          inv.final_amount !== undefined ? parseFloat(inv.final_amount) : 0,
        amount_paid:
          inv.amount_paid !== undefined ? parseFloat(inv.amount_paid) : 0,
        amount_due:
          inv.amount_due !== undefined ? parseFloat(inv.amount_due) : 0,
      }));
    } catch (error) {
      console.error(
        "üöÄ ~ SupplierReportService: getUnpaidOrPartiallyPaidInvoices - L·ªói:",
        error
      );
      throw error;
    }
  },
};

module.exports = SupplierReportService;
