const ProductModel = require("../../modules/product/product.model"); // Import ProductModel

const ProductService = {
  /**
   * L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ ph√¢n trang.
   * @param {number} skip - S·ªë l∆∞·ª£ng b·∫£n ghi b·ªè qua (offset).
   * @param {number} limit - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn l·∫•y (limit).
   * @returns {Promise<{products: Array<Object>, total: number}>} Promise gi·∫£i quy·∫øt v·ªõi danh s√°ch s·∫£n ph·∫©m v√† t·ªïng s·ªë l∆∞·ª£ng.
   */
  getAllProducts: async (skip, limit, filters = {}) => {
    try {
      const { products, total } = await ProductModel.getAllProducts(
        skip,
        limit,
        filters
      );
      return { products, total };
    } catch (error) {
      console.error("üöÄ ~ product.service.js: getAllProducts - L·ªói:", error);
      throw error; // N√©m l·ªói ƒë·ªÉ controller x·ª≠ l√Ω
    }
  },

  /**
   * L·∫•y s·∫£n ph·∫©m theo ID.
   * @param {string} id - ID s·∫£n ph·∫©m.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  getProductById: async (id) => {
    try {
      const product = await ProductModel.getProductById(id);
      return product;
    } catch (error) {
      console.error("üöÄ ~ product.service.js: getProductById - L·ªói:", error);
      throw error;
    }
  },

  /**
   * T·∫°o s·∫£n ph·∫©m m·ªõi.
   * @param {Object} productData - D·ªØ li·ªáu s·∫£n ph·∫©m.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ t·∫°o s·∫£n ph·∫©m.
   */
  createProduct: async (productData) => {
    try {
      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn (v√≠ d·ª•: ki·ªÉm tra tr√πng l·∫∑p SKU, x·ª≠ l√Ω ·∫£nh...)
      const result = await ProductModel.createProduct(productData);
      return result;
    } catch (error) {
      console.error("üöÄ ~ product.service.js: createProduct - L·ªói:", error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t s·∫£n ph·∫©m.
   * @param {string} id - ID s·∫£n ph·∫©m.
   * @param {Object} productData - D·ªØ li·ªáu c·∫≠p nh·∫≠t s·∫£n ph·∫©m.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ c·∫≠p nh·∫≠t.
   */
  updateProduct: async (id, productData) => {
    try {
      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn
      const result = await ProductModel.updateProduct(id, productData);
      return result;
    } catch (error) {
      console.error("üöÄ ~ product.service.js: updateProduct - L·ªói:", error);
      throw error;
    }
  },

  /**
   * X√≥a s·∫£n ph·∫©m.
   * @param {string} id - ID s·∫£n ph·∫©m.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ x√≥a.
   */
  deleteProduct: async (id) => {
    try {
      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn (v√≠ d·ª•: ki·ªÉm tra s·∫£n ph·∫©m c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng)
      const result = await ProductModel.deleteProduct(id);
      return result;
    } catch (error) {
      console.error("üöÄ ~ product.service.js: deleteProduct - L·ªói:", error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng t·ªìn kho c·ªßa s·∫£n ph·∫©m.
   * @param {string} product_id - ID s·∫£n ph·∫©m.
   * @param {number} stockChange - Thay ƒë·ªïi t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho.
   * @param {number} reservedChange - Thay ƒë·ªïi t·ªìn kho ƒë·∫∑t tr∆∞·ªõc.
   * @param {number} availableChange - Thay ƒë·ªïi t·ªìn kho kh·∫£ d·ª•ng.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ c·∫≠p nh·∫≠t.
   */
  updateStockFields: async (
    product_id,
    stockChange,
    reservedChange,
    availableChange
  ) => {
    try {
      const result = await ProductModel.updateStockFields(
        product_id,
        stockChange,
        reservedChange,
        availableChange
      );
      return result;
    } catch (error) {
      console.error("üöÄ ~ product.service.js: updateStockFields - L·ªói:", error);
      throw error;
    }
  },
};

module.exports = ProductService;
