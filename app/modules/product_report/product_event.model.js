const db = require("../../config/db.config"); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng ƒë·∫øn file c·∫•u h√¨nh database c·ªßa b·∫°n
const { v4: uuidv4 } = require("uuid"); // ƒê·ªÉ t·∫°o UUID cho event_id

const ProductEventModel = {
  /**
   * Ghi l·∫°i m·ªôt s·ª± ki·ªán li√™n quan ƒë·∫øn s·∫£n ph·∫©m v√†o b·∫£ng product_events.
   * ƒê√¢y l√† m·ªôt b·∫£n ghi l·ªãch s·ª≠ to√†n di·ªán v·ªÅ m·ªçi ho·∫°t ƒë·ªông c·ªßa s·∫£n ph·∫©m.
   *
   * @param {Object} eventData - D·ªØ li·ªáu c·ªßa s·ª± ki·ªán s·∫£n ph·∫©m.
   * @param {string} eventData.product_id - ID s·∫£n ph·∫©m li√™n quan.
   * @param {string} [eventData.warehouse_id=null] - ID kho n∆°i s·ª± ki·ªán x·∫£y ra (t√πy ch·ªçn).
   * @param {string} eventData.event_type - Lo·∫°i s·ª± ki·ªán (v√≠ d·ª•: 'ORDER_SOLD', 'PO_RECEIVED', 'STOCK_ADJUSTMENT_INCREASE').
   * @param {number} eventData.quantity_impact - S·ªë l∆∞·ª£ng thay ƒë·ªïi (d∆∞∆°ng cho tƒÉng, √¢m cho gi·∫£m).
   * @param {number} [eventData.transaction_price=null] - Gi√° tr√™n m·ªói ƒë∆°n v·ªã t·∫°i th·ªùi ƒëi·ªÉm giao d·ªãch (t√πy ch·ªçn).
   * @param {string} [eventData.partner_name=null] - T√™n ƒë·ªëi t√°c (kh√°ch h√†ng ho·∫∑c nh√† cung c·∫•p) (t√πy ch·ªçn).
   * @param {number} [eventData.current_stock_after=null] - T·ªïng s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m sau s·ª± ki·ªán (t√πy ch·ªçn).
   * @param {string} eventData.reference_id - ID c·ªßa t√†i li·ªáu g·ªëc (order_id, po_id, adjustment_id).
   * @param {string} eventData.reference_type - Lo·∫°i t√†i li·ªáu g·ªëc ('ORDER', 'PURCHASE_ORDER', 'INVENTORY_ADJUSTMENT').
   * @param {string} [eventData.description=null] - M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± ki·ªán (t√πy ch·ªçn).
   * @param {string} [eventData.initiated_by=null] - ID c·ªßa ng∆∞·ªùi d√πng ho·∫∑c h·ªá th·ªëng ƒë√£ k√≠ch ho·∫°t s·ª± ki·ªán (t√πy ch·ªçn).
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ truy v·∫•n.
   */
  recordEvent: ({
    product_id,
    warehouse_id = null,
    event_type,
    quantity_impact,
    transaction_price = null,
    partner_name = null,
    current_stock_after = null,
    reference_id,
    reference_type,
    description = null,
    initiated_by = null,
  }) => {
    return new Promise((resolve, reject) => {
      const event_id = uuidv4(); // T·∫°o m·ªôt UUID duy nh·∫•t cho b·∫£n ghi s·ª± ki·ªán

      const sql = `
        INSERT INTO product_events (
          event_id, product_id, warehouse_id, event_type,
          quantity_impact, transaction_price, partner_name, current_stock_after,
          reference_id, reference_type, description, event_timestamp, initiated_by
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
      `;

      const values = [
        event_id,
        product_id,
        warehouse_id,
        event_type,
        quantity_impact,
        transaction_price,
        partner_name,
        current_stock_after,
        reference_id,
        reference_type,
        description,
        initiated_by,
      ];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error(
            "üöÄ ~ product_event.model.js: recordEvent - Error recording product event:",
            err
          );
          return reject(err);
        }
        resolve(result); // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ thao t√°c INSERT
      });
    });
  },

  /**
   * L·∫•y t·∫•t c·∫£ c√°c s·ª± ki·ªán l·ªãch s·ª≠ cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
   *
   * @param {string} product_id - ID c·ªßa s·∫£n ph·∫©m c·∫ßn l·∫•y l·ªãch s·ª≠.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt m·∫£ng c√°c s·ª± ki·ªán.
   */
  getEventsByProductId: (product_id) => {
    return new Promise((resolve, reject) => {
      const sql = `
        SELECT
          event_id,
          product_id,
          warehouse_id,
          event_type,
          quantity_impact,
          transaction_price,
          partner_name,
          current_stock_after,
          reference_id,
          reference_type,
          description,
          event_timestamp,
          initiated_by
        FROM product_events
        WHERE product_id = ?
        ORDER BY event_timestamp ASC; -- S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn
      `;
      db.query(sql, [product_id], (err, results) => {
        if (err) {
          console.error(
            "üöÄ ~ product_event.model.js: getEventsByProductId - Error fetching product events:",
            err
          );
          return reject(err);
        }
        resolve(results);
      });
    });
  },

  /**
   * L·∫•y t·∫•t c·∫£ c√°c s·ª± ki·ªán l·ªãch s·ª≠ cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ trong m·ªôt kho c·ª• th·ªÉ.
   *
   * @param {string} product_id - ID c·ªßa s·∫£n ph·∫©m.
   * @param {string} warehouse_id - ID c·ªßa kho.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt m·∫£ng c√°c s·ª± ki·ªán.
   */
  getEventsByProductAndWarehouseId: (product_id, warehouse_id) => {
    return new Promise((resolve, reject) => {
      const sql = `
        SELECT
          pe.event_id,
          pe.product_id,
          pe.warehouse_id,
          w.warehouse_name, -- L·∫•y t√™n kho t·ª´ b·∫£ng warehouses
          pe.event_type,
          pe.quantity_impact,
          pe.transaction_price,
          pe.partner_name,
          pe.current_stock_after,
          pe.reference_id,
          pe.reference_type,
          pe.description,
          pe.event_timestamp,
          pe.initiated_by
        FROM product_events pe
        JOIN warehouses w ON pe.warehouse_id = w.warehouse_id -- JOIN v·ªõi b·∫£ng warehouses
        WHERE pe.product_id = ? AND pe.warehouse_id = ?
        ORDER BY pe.event_timestamp ASC;
      `;
      db.query(sql, [product_id, warehouse_id], (err, results) => {
        if (err) {
          console.error(
            "üöÄ ~ product_event.model.js: getEventsByProductAndWarehouseId - Error fetching product events by product and warehouse:",
            err
          );
          return reject(err);
        }
        resolve(results);
      });
    });
  },
};

module.exports = ProductEventModel;
