const ProductEventModel = require('./product_event.model'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng

const ProductReportService = {
  /**
   * T·∫°o b√°o c√°o l·ªãch s·ª≠ chi ti·∫øt cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
   * B√°o c√°o n√†y t·ªïng h·ª£p th√¥ng tin t·ª´ c√°c s·ª± ki·ªán ƒë√£ ghi nh·∫≠n trong product_events.
   *
   * @param {string} product_id - ID c·ªßa s·∫£n ph·∫©m c·∫ßn t·∫°o b√°o c√°o.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng l·ªãch s·ª≠ ƒë√£ ƒë·ªãnh d·∫°ng.
   * M·ªói ƒë·ªëi t∆∞·ª£ng bao g·ªìm: chung_tu, thoi_gian, loai_giao_dich,
   * doi_tac, gia_gd, so_luong, ton_cuoi.
   */
  getProductHistoryReport: async (product_id) => {
    try {
      const events = await ProductEventModel.getEventsByProductId(product_id);

      if (!events || events.length === 0) {
        return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o
      }

      const report = events.map(event => {
        let loai_giao_dich;
        // Map event_type sang ƒë·ªãnh d·∫°ng ti·∫øng Vi·ªát mong mu·ªën
        switch (event.event_type) {
          case 'ORDER_SOLD':
            loai_giao_dich = 'B√°n h√†ng';
            break;
          case 'PO_RECEIVED':
            loai_giao_dich = 'Nh·∫≠p h√†ng';
            break;
          case 'STOCK_ADJUSTMENT_INCREASE':
            loai_giao_dich = 'ƒêi·ªÅu ch·ªânh tƒÉng kho';
            break;
          case 'STOCK_ADJUSTMENT_DECREASE':
            loai_giao_dich = 'ƒêi·ªÅu ch·ªânh gi·∫£m kho';
            break;
          case 'RETURN_FROM_CUSTOMER': // Gi·∫£ ƒë·ªãnh b·∫°n s·∫Ω th√™m event_type n√†y sau
            loai_giao_dich = 'Kh√°ch h√†ng tr·∫£ h√†ng';
            break;
          case 'RETURN_TO_SUPPLIER': // Gi·∫£ ƒë·ªãnh b·∫°n s·∫Ω th√™m event_type n√†y sau
            loai_giao_dich = 'Tr·∫£ h√†ng nh√† cung c·∫•p';
            break;
          default:
            loai_giao_dich = 'Giao d·ªãch kh√°c';
        }

        return {
          chung_tu: event.reference_id,
          thoi_gian: event.event_timestamp, // C√≥ th·ªÉ format l·∫°i theo √Ω mu·ªën (v√≠ d·ª•: 'DD/MM/YYYY HH:mm:ss')
          loai_giao_dich: loai_giao_dich,
          doi_tac: event.partner_name || 'N/A', // Hi·ªÉn th·ªã N/A n·∫øu kh√¥ng c√≥ ƒë·ªëi t√°c (v√≠ d·ª•: ƒëi·ªÅu ch·ªânh kho)
          gia_gd: event.transaction_price || 0, // Gi√° giao d·ªãch, 0 n·∫øu kh√¥ng c√≥
          so_luong: event.quantity_impact,
          ton_cuoi: event.current_stock_after || 0, // T·ªìn cu·ªëi sau s·ª± ki·ªán, 0 n·∫øu null
          mo_ta: event.description, // Th√™m m√¥ t·∫£ cho chi ti·∫øt
        };
      });

      return report;

    } catch (error) {
      console.error("üöÄ ~ ProductReportService: getProductHistoryReport - Error:", error);
      throw error; // N√©m l·ªói ƒë·ªÉ controller x·ª≠ l√Ω
    }
  },
};

module.exports = ProductReportService;
