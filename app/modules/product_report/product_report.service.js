const ProductEventModel = require("./product_event.model"); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
const ProductModel = require("../product/product.model");
const WarehouseModel = require('../warehouse/warehouse.model');


const ProductReportService = {
  /**
   * T·∫°o b√°o c√°o l·ªãch s·ª≠ chi ti·∫øt cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
   * B√°o c√°o n√†y t·ªïng h·ª£p th√¥ng tin t·ª´ c√°c s·ª± ki·ªán ƒë√£ ghi nh·∫≠n trong product_events.
   *
   * @param {string} product_id - ID c·ªßa s·∫£n ph·∫©m c·∫ßn t·∫°o b√°o c√°o.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng l·ªãch s·ª≠ ƒë√£ ƒë·ªãnh d·∫°ng.
   * M·ªói ƒë·ªëi t∆∞·ª£ng bao g·ªìm: chung_tu, thoi_gian, loai_giao_dich,
   * doi_tac, gia_gd, so_luong, ton_cuoi.
   */
  getProductHistoryReport: async (product_id) => {
    try {
      const events = await ProductEventModel.getEventsByProductId(product_id);

      if (!events || events.length === 0) {
        return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o
      }

      // T√≠nh to√°n t·ªìn kho cu·ªëi ch√≠nh x√°c d·ª±a tr√™n quantity_impact
      // S·∫Øp x·∫øp events theo th·ªùi gian tƒÉng d·∫ßn (c≈© nh·∫•t tr∆∞·ªõc) ƒë·ªÉ t√≠nh to√°n ƒë√∫ng
      const sortedEvents = events.sort((a, b) => new Date(a.event_timestamp) - new Date(b.event_timestamp));
      
      let runningStock = 0; // T·ªìn kho ch·∫°y
      const reportWithCalculatedStock = sortedEvents.map((event) => {
        // C·∫≠p nh·∫≠t t·ªìn kho ch·∫°y d·ª±a tr√™n quantity_impact
        // quantity_impact: d∆∞∆°ng = tƒÉng kho, √¢m = gi·∫£m kho
        runningStock += parseFloat(event.quantity_impact || 0);
        
        let loai_giao_dich;
        // Map event_type sang ƒë·ªãnh d·∫°ng ti·∫øng Vi·ªát mong mu·ªën
        switch (event.event_type) {
          case "ORDER_SOLD":
            loai_giao_dich = "B√°n h√†ng";
            break;
          case "PO_RECEIVED":
            loai_giao_dich = "Nh·∫≠p h√†ng";
            break;
          case "STOCK_ADJUSTMENT_INCREASE":
            loai_giao_dich = "ƒêi·ªÅu ch·ªânh tƒÉng kho";
            break;
          case "STOCK_ADJUSTMENT_DECREASE":
            loai_giao_dich = "ƒêi·ªÅu ch·ªânh gi·∫£m kho";
            break;
          case "RETURN_FROM_CUSTOMER":
            loai_giao_dich = "Kh√°ch h√†ng tr·∫£ h√†ng";
            break;
          case "RETURN_TO_SUPPLIER":
            loai_giao_dich = "Tr·∫£ h√†ng nh√† cung c·∫•p";
            break;
          default:
            loai_giao_dich = "Giao d·ªãch kh√°c";
        }

        return {
          chung_tu: event.reference_id,
          thoi_gian: event.event_timestamp,
          loai_giao_dich: loai_giao_dich,
          doi_tac: event.partner_name || "N/A",
          gia_gd: event.transaction_price || 0,
          so_luong: event.quantity_impact,
          ton_cuoi: runningStock, // S·ª≠ d·ª•ng t·ªìn kho ƒë√£ t√≠nh to√°n
          mo_ta: event.description,
        };
      });

      // S·∫Øp x·∫øp l·∫°i theo th·ªùi gian gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc) ƒë·ªÉ hi·ªÉn th·ªã
      return reportWithCalculatedStock.sort((a, b) => new Date(b.thoi_gian) - new Date(a.thoi_gian));
    } catch (error) {
      console.error(
        "üöÄ ~ ProductReportService: getProductHistoryReport - Error:",
        error
      );
      throw error; // N√©m l·ªói ƒë·ªÉ controller x·ª≠ l√Ω
    }
  },

  getProductHistoryByProductAndWarehouse: async (product_id, warehouse_id) => {
    try {
      // G·ªçi h√†m model m·ªõi ƒë·ªÉ l·∫•y s·ª± ki·ªán theo s·∫£n ph·∫©m v√† kho
      const events = await ProductEventModel.getEventsByProductAndWarehouseId(
        product_id,
        warehouse_id
      );

      if (!events || events.length === 0) {
        return [];
      }

      // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
      const productInfo = await ProductModel.getProductById(product_id);
      const productName = productInfo
        ? productInfo.product_name
        : `S·∫£n ph·∫©m ${product_id}`;

      // L·∫•y t√™n kho
      const warehouseInfo = await WarehouseModel.getById(warehouse_id);
      const warehouseName = warehouseInfo
        ? warehouseInfo.warehouse_name
        : `Kho ${warehouse_id}`;

      // T√≠nh to√°n t·ªìn kho cu·ªëi ch√≠nh x√°c d·ª±a tr√™n quantity_impact
      // S·∫Øp x·∫øp events theo th·ªùi gian tƒÉng d·∫ßn (c≈© nh·∫•t tr∆∞·ªõc) ƒë·ªÉ t√≠nh to√°n ƒë√∫ng
      const sortedEvents = events.sort((a, b) => new Date(a.event_timestamp) - new Date(b.event_timestamp));
      
      let runningStock = 0; // T·ªìn kho ch·∫°y
      const reportWithCalculatedStock = sortedEvents.map((event) => {
        // C·∫≠p nh·∫≠t t·ªìn kho ch·∫°y d·ª±a tr√™n quantity_impact
        // quantity_impact: d∆∞∆°ng = tƒÉng kho, √¢m = gi·∫£m kho
        runningStock += parseFloat(event.quantity_impact || 0);
        
        let loai_giao_dich;
        switch (event.event_type) {
          case "ORDER_SOLD":
            loai_giao_dich = "B√°n h√†ng";
            break;
          case "PO_RECEIVED":
            loai_giao_dich = "Nh·∫≠p h√†ng";
            break;
          case "STOCK_ADJUSTMENT_INCREASE":
            loai_giao_dich = "ƒêi·ªÅu ch·ªânh tƒÉng kho";
            break;
          case "STOCK_ADJUSTMENT_DECREASE":
            loai_giao_dich = "ƒêi·ªÅu ch·ªânh gi·∫£m kho";
            break;
          case "ORDER_CANCELLED":
            loai_giao_dich = "Hu·ª∑ ƒë∆°n h√†ng";
            break;
          case "RETURN_FROM_CUSTOMER":
            loai_giao_dich = "Kh√°ch h√†ng tr·∫£ h√†ng";
            break;
          case "RETURN_TO_SUPPLIER":
            loai_giao_dich = "Tr·∫£ h√†ng nh√† cung c·∫•p";
            break;
          default:
            loai_giao_dich = "Giao d·ªãch kh√°c";
        }

        return {
          chung_tu: event.reference_id,
          thoi_gian: event.event_timestamp,
          loai_giao_dich: loai_giao_dich,
          doi_tac: event.partner_name || "N/A",
          gia_gd: event.transaction_price || 0,
          so_luong: event.quantity_impact,
          ton_cuoi: runningStock, // S·ª≠ d·ª•ng t·ªìn kho ƒë√£ t√≠nh to√°n
          mo_ta: event.description,
          product_name: productName,
          warehouse_name: event.warehouse_name || warehouseName,
          warehouse_id: event.warehouse_id,
        };
      });

      // S·∫Øp x·∫øp l·∫°i theo th·ªùi gian gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc) ƒë·ªÉ hi·ªÉn th·ªã
      return reportWithCalculatedStock.sort((a, b) => new Date(b.thoi_gian) - new Date(a.thoi_gian));
    } catch (error) {
      console.error(
        "üöÄ ~ ProductReportService: getProductHistoryByProductAndWarehouse - L·ªói:",
        error
      );
      throw error;
    }
  },
};

module.exports = ProductReportService;
