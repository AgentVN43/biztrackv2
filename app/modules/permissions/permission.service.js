const PermissionModel = require("./permission.model");

const PermissionService = {
  /**
   * L·∫•y t·∫•t c·∫£ quy·ªÅn c√≥ ph√¢n trang.
   * @param {number} skip - S·ªë l∆∞·ª£ng b·∫£n ghi b·ªè qua (offset).
   * @param {number} limit - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn l·∫•y (limit).
   * @param {Object} filters - B·ªô l·ªçc t√¨m ki·∫øm.
   * @returns {Promise<{permissions: Array<Object>, total: number}>} Promise gi·∫£i quy·∫øt v·ªõi danh s√°ch quy·ªÅn v√† t·ªïng s·ªë l∆∞·ª£ng.
   */
  getAllPermissions: async (skip, limit, filters = {}) => {
    try {
      const { permissions, total } = await PermissionModel.getAllPermissions(
        skip,
        limit,
        filters
      );
      console.log("üöÄ ~ permissions:", permissions);
      return { permissions, total };
    } catch (error) {
      throw error;
    }
  },

  /**
   * L·∫•y quy·ªÅn theo ID.
   * @param {string} id - ID quy·ªÅn.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng quy·ªÅn ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  getPermissionById: async (id) => {
    try {
      const permission = await PermissionModel.getPermissionById(id);
      return permission;
    } catch (error) {
      throw error;
    }
  },

  /**
   * L·∫•y quy·ªÅn theo permission_code.
   * @param {string} permissionCode - Permission code.
   * @returns {Promise<Object|null>} Promise gi·∫£i quy·∫øt v·ªõi ƒë·ªëi t∆∞·ª£ng quy·ªÅn ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  getPermissionByCode: async (permissionCode) => {
    try {
      const permission = await PermissionModel.getPermissionByCode(
        permissionCode
      );
      return permission;
    } catch (error) {
      throw error;
    }
  },

  /**
   * T·∫°o quy·ªÅn m·ªõi.
   * @param {Object} permissionData - D·ªØ li·ªáu quy·ªÅn.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ t·∫°o quy·ªÅn.
   */
  createPermission: async (permissionData) => {
    try {
      // Ki·ªÉm tra permission_code tr√πng l·∫∑p
      if (permissionData.permission_code) {
        const codeExists = await PermissionModel.checkPermissionCodeExists(
          permissionData.permission_code
        );
        if (codeExists) {
          throw new Error(
            `Permission code "${permissionData.permission_code}" ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn code kh√°c.`
          );
        }
      }

      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn (v√≠ d·ª•: validation, format data...)
      const result = await PermissionModel.createPermission(permissionData);
      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t quy·ªÅn.
   * @param {string} id - ID quy·ªÅn.
   * @param {Object} permissionData - D·ªØ li·ªáu c·∫≠p nh·∫≠t quy·ªÅn.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ c·∫≠p nh·∫≠t.
   */
  updatePermission: async (id, permissionData) => {
    try {
      // Ki·ªÉm tra permission_code tr√πng l·∫∑p (lo·∫°i tr·ª´ quy·ªÅn hi·ªán t·∫°i)
      if (permissionData.permission_code) {
        const codeExists = await PermissionModel.checkPermissionCodeExists(
          permissionData.permission_code,
          id
        );
        if (codeExists) {
          throw new Error(
            `Permission code "${permissionData.permission_code}" ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn code kh√°c.`
          );
        }
      }

      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn
      const result = await PermissionModel.updatePermission(id, permissionData);
      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * X√≥a quy·ªÅn.
   * @param {string} id - ID quy·ªÅn.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ x√≥a.
   */
  deletePermission: async (id) => {
    try {
      // Th√™m logic nghi·ªáp v·ª• n·∫øu c·∫ßn (v√≠ d·ª•: ki·ªÉm tra quy·ªÅn c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng)
      const result = await PermissionModel.deletePermission(id);
      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * L·∫•y quy·ªÅn c·ªßa m·ªôt role.
   * @param {string} roleId - ID role.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi danh s√°ch quy·ªÅn c·ªßa role.
   */
  getPermissionsByRole: async (roleId) => {
    try {
      const permissions = await PermissionModel.getPermissionsByRole(roleId);
      return permissions;
    } catch (error) {
      throw error;
    }
  },

  /**
   * G√°n quy·ªÅn cho role.
   * @param {string} roleId - ID role.
   * @param {string} permissionId - ID permission.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ g√°n quy·ªÅn.
   */
  assignPermissionToRole: async (roleId, permissionId) => {
    try {
      // Ki·ªÉm tra role v√† permission c√≥ t·ªìn t·∫°i kh√¥ng
      const roleExists = await PermissionModel.getPermissionById(roleId); // C·∫ßn import role model ƒë·ªÉ ki·ªÉm tra
      const permissionExists = await PermissionModel.getPermissionById(
        permissionId
      );

      if (!permissionExists) {
        throw new Error("Permission kh√¥ng t·ªìn t·∫°i");
      }

      const result = await PermissionModel.assignPermissionToRole(
        roleId,
        permissionId
      );
      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * H·ªßy g√°n quy·ªÅn cho role.
   * @param {string} roleId - ID role.
   * @param {string} permissionId - ID permission.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ h·ªßy g√°n quy·ªÅn.
   */
  removePermissionFromRole: async (roleId, permissionId) => {
    try {
      const result = await PermissionModel.removePermissionFromRole(
        roleId,
        permissionId
      );
      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * L·∫•y t·∫•t c·∫£ quy·ªÅn c·ªßa user th√¥ng qua role.
   * @param {string} userId - ID user.
   * @returns {Promise<Array<Object>>} Promise gi·∫£i quy·∫øt v·ªõi danh s√°ch quy·ªÅn c·ªßa user.
   */
  getUserPermissions: async (userId) => {
    try {
      const permissions = await PermissionModel.getUserPermissions(userId);
      return permissions;
    } catch (error) {
      throw error;
    }
  },

  /**
   * Ki·ªÉm tra user c√≥ quy·ªÅn c·ª• th·ªÉ kh√¥ng.
   * @param {string} userId - ID user.
   * @param {string} permissionCode - Permission code c·∫ßn ki·ªÉm tra.
   * @returns {Promise<boolean>} Promise gi·∫£i quy·∫øt v·ªõi true n·∫øu user c√≥ quy·ªÅn, false n·∫øu kh√¥ng.
   */
  checkUserPermission: async (userId, permissionCode) => {
    try {
      const hasPermission = await PermissionModel.checkUserPermission(
        userId,
        permissionCode
      );
      return hasPermission;
    } catch (error) {
      throw error;
    }
  },

  /**
   * G√°n nhi·ªÅu quy·ªÅn cho role.
   * @param {string} roleId - ID role.
   * @param {Array<string>} permissionIds - Danh s√°ch ID permissions.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ g√°n quy·ªÅn.
   */
  assignMultiplePermissionsToRole: async (roleId, permissionIds) => {
    try {
      // L·∫•y danh s√°ch permission hi·ªán t·∫°i c·ªßa role
      const currentPermissions = await PermissionModel.getPermissionsByRole(
        roleId
      );
      const currentIds = currentPermissions?.permissions.map((p) =>
        String(p.permission_id)
      );

      // L·∫•y danh s√°ch permission_id h·ª£p l·ªá t·ª´ b·∫£ng permissions
      // const [validPermissions] = await db.query(
      //   "SELECT permission_id FROM permissions WHERE permission_id IN (?)",
      //   [permissionIds]
      // );
      // const validIds = validPermissions.map((p) => String(p.permission_id));

      const validIds = await PermissionModel.getValidPermissionIds(
        permissionIds
      );
      console.log("üöÄ ~ validIds:", validIds);
      // T√¨m permission c·∫ßn x√≥a (c√≥ trong current nh∆∞ng kh√¥ng c√≥ trong m·ªõi)
      const toRemove = currentIds.filter((id) => !validIds.includes(id));
      // T√¨m permission c·∫ßn th√™m (c√≥ trong m·ªõi nh∆∞ng kh√¥ng c√≥ trong current)
      const toAdd = validIds.filter((id) => !currentIds.includes(id));

      // X√≥a nh·ªØng permission kh√¥ng c√≤n
      for (const permissionId of toRemove) {
        await PermissionModel.removePermissionFromRole(roleId, permissionId);
      }
      // Th√™m nh·ªØng permission m·ªõi
      for (const permissionId of toAdd) {
        await PermissionModel.assignPermissionToRole(roleId, permissionId);
      }

      // N·∫øu c√≥ permissionIds kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng b√°o
      const invalidIds = permissionIds.filter((id) => !validIds.includes(id));
      return {
        success: true,
        added: toAdd,
        removed: toRemove,
        invalid: invalidIds,
        message: invalidIds.length
          ? `C√°c permission_id sau kh√¥ng t·ªìn t·∫°i: ${invalidIds.join(", ")}`
          : undefined,
      };
    } catch (error) {
      throw error;
    }
  },

  /**
   * H·ªßy g√°n nhi·ªÅu quy·ªÅn cho role.
   * @param {string} roleId - ID role.
   * @param {Array<string>} permissionIds - Danh s√°ch ID permissions.
   * @returns {Promise<Object>} Promise gi·∫£i quy·∫øt v·ªõi k·∫øt qu·∫£ h·ªßy g√°n quy·ªÅn.
   */
  removeMultiplePermissionsFromRole: async (roleId, permissionIds) => {
    try {
      const results = [];
      for (const permissionId of permissionIds) {
        const result = await PermissionModel.removePermissionFromRole(
          roleId,
          permissionId
        );
        results.push(result);
      }
      return { success: true, results };
    } catch (error) {
      throw error;
    }
  },
};

module.exports = PermissionService;
