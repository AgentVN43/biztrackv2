// Debug d·ªØ li·ªáu Frontend truy·ªÅn v·ªÅ
const CustomerReturnService = require("./customer_return.service");

// Gi·∫£ l·∫≠p d·ªØ li·ªáu Frontend c√≥ th·ªÉ truy·ªÅn v·ªÅ
const mockFrontendData = {
  customer_id: "test-customer-123",
  order_id: "test-order-123",
  return_details: [
    {
      product_id: "product-1",
      quantity: 1,
      refund_amount: 12250000 // Frontend c√≥ th·ªÉ truy·ªÅn sai gi√° tr·ªã n√†y
    },
    {
      product_id: "product-2", 
      quantity: 2,
      refund_amount: 12250000 // Frontend c√≥ th·ªÉ truy·ªÅn sai gi√° tr·ªã n√†y
    }
  ]
};

// D·ªØ li·ªáu th·ª±c t·∫ø c·ªßa order
const mockOrderData = {
  order_id: "test-order-123",
  customer_id: "test-customer-123",
  final_amount: 25000000, // 25.000.000
  order_amount: 480000, // 480.000 discount
  total_amount: 25480000 // 25.480.000 (tr∆∞·ªõc discount)
};

const mockOrderDetails = {
  products: [
    {
      product_id: "product-1",
      price: 2000000, // 2.000.000
      quantity: 2,
      discount: 125000 // 250.000 / 2 = 125.000 per item
    },
    {
      product_id: "product-2", 
      price: 10990000, // 10.990.000
      quantity: 2,
      discount: 125000 // 250.000 / 2 = 125.000 per item
    }
  ]
};

async function debugFrontendData() {
  console.log("üîç Debug Frontend Data\n");

  console.log("üìä D·ªØ li·ªáu Frontend truy·ªÅn v·ªÅ:");
  console.log(JSON.stringify(mockFrontendData, null, 2));
  console.log();

  console.log("üìä D·ªØ li·ªáu th·ª±c t·∫ø c·ªßa order:");
  console.log(JSON.stringify(mockOrderData, null, 2));
  console.log();

  console.log("üìä Chi ti·∫øt s·∫£n ph·∫©m th·ª±c t·∫ø:");
  console.log(JSON.stringify(mockOrderDetails, null, 2));
  console.log();

  // Ki·ªÉm tra v·∫•n ƒë·ªÅ c√≥ th·ªÉ x·∫£y ra
  console.log("üö® C√ÅC V·∫§N ƒê·ªÄ C√ì TH·ªÇ X·∫¢Y RA:");
  console.log("=" * 50);

  // 1. Frontend truy·ªÅn refund_amount sai
  console.log("1. Frontend truy·ªÅn refund_amount sai:");
  const totalFrontendRefund = mockFrontendData.return_details.reduce((sum, d) => sum + (d.refund_amount || 0), 0);
  console.log(`   - T·ªïng refund Frontend truy·ªÅn: ${totalFrontendRefund.toLocaleString()}`);
  console.log(`   - Final amount th·ª±c t·∫ø: ${mockOrderData.final_amount.toLocaleString()}`);
  console.log(`   - Ch√™nh l·ªách: ${(mockOrderData.final_amount - totalFrontendRefund).toLocaleString()}`);
  console.log();

  // 2. Ki·ªÉm tra t·ª´ng item
  console.log("2. Ki·ªÉm tra t·ª´ng item:");
  mockFrontendData.return_details.forEach((detail, index) => {
    const product = mockOrderDetails.products.find(p => p.product_id === detail.product_id);
    if (product) {
      const actualGross = product.price * detail.quantity;
      const actualDiscount = product.discount * detail.quantity;
      const actualNet = actualGross - actualDiscount;
      
      console.log(`   Item ${index + 1} (${detail.product_id}):`);
      console.log(`     - Quantity: ${detail.quantity}`);
      console.log(`     - Frontend refund_amount: ${detail.refund_amount.toLocaleString()}`);
      console.log(`     - Th·ª±c t·∫ø gross: ${actualGross.toLocaleString()}`);
      console.log(`     - Th·ª±c t·∫ø discount: ${actualDiscount.toLocaleString()}`);
      console.log(`     - Th·ª±c t·∫ø net: ${actualNet.toLocaleString()}`);
      console.log(`     - Ch√™nh l·ªách: ${(detail.refund_amount - actualNet).toLocaleString()}`);
      console.log();
    }
  });

  // 3. T√≠nh to√°n theo logic Backend
  console.log("3. T√≠nh to√°n theo logic Backend:");
  console.log("=" * 50);

  const total_order_gross = mockOrderDetails.products.reduce((sum, p) => sum + (p.price * p.quantity), 0);
  const total_return_gross = mockFrontendData.return_details.reduce((sum, d) => {
    const product = mockOrderDetails.products.find(p => p.product_id === d.product_id);
    return sum + ((product?.price || 0) * d.quantity);
  }, 0);
  
  const total_return_product_discount = mockFrontendData.return_details.reduce((sum, d) => {
    const product = mockOrderDetails.products.find(p => p.product_id === d.product_id);
    return sum + ((product?.discount || 0) * d.quantity);
  }, 0);

  const return_ratio = total_return_gross / total_order_gross;
  const allocated_order_discount = mockOrderData.order_amount * return_ratio;
  const allocated_order_discount_rounded = Math.round(allocated_order_discount * 100) / 100;
  
  const net_refund = (total_return_gross - total_return_product_discount) - allocated_order_discount_rounded;
  const net_refund_rounded = Math.round(net_refund * 100) / 100;

  console.log(`   - T·ªïng gi√° tr·ªã ƒë∆°n h√†ng: ${total_order_gross.toLocaleString()}`);
  console.log(`   - T·ªïng gi√° tr·ªã h√†ng tr·∫£: ${total_return_gross.toLocaleString()}`);
  console.log(`   - T·ª∑ l·ªá: ${(return_ratio * 100).toFixed(2)}%`);
  console.log(`   - T·ªïng gi·∫£m gi√° s·∫£n ph·∫©m: ${total_return_product_discount.toLocaleString()}`);
  console.log(`   - Order discount ph√¢n b·ªï: ${allocated_order_discount_rounded.toLocaleString()}`);
  console.log(`   - Net refund (Backend): ${net_refund_rounded.toLocaleString()}`);
  console.log(`   - T·ªïng refund Frontend: ${totalFrontendRefund.toLocaleString()}`);
  console.log(`   - Ch√™nh l·ªách: ${(net_refund_rounded - totalFrontendRefund).toLocaleString()}`);
  console.log();

  // 4. Ki·ªÉm tra logic final return
  console.log("4. Ki·ªÉm tra logic final return:");
  console.log("=" * 50);
  
  // Gi·∫£ s·ª≠ ƒë√¢y l√† l·∫ßn tr·∫£ cu·ªëi c√πng
  const total_refund_before = 0; // Gi·∫£ s·ª≠ ch∆∞a c√≥ l·∫ßn tr·∫£ n√†o tr∆∞·ªõc ƒë√≥
  const final_refund = mockOrderData.final_amount - total_refund_before;
  const final_refund_rounded = Math.round(final_refund * 100) / 100;
  
  console.log(`   - Total refund before: ${total_refund_before.toLocaleString()}`);
  console.log(`   - Final amount: ${mockOrderData.final_amount.toLocaleString()}`);
  console.log(`   - Final refund: ${final_refund_rounded.toLocaleString()}`);
  console.log(`   - Frontend total: ${totalFrontendRefund.toLocaleString()}`);
  console.log(`   - Ch√™nh l·ªách: ${(final_refund_rounded - totalFrontendRefund).toLocaleString()}`);
  console.log();

  // 5. ƒê·ªÅ xu·∫•t s·ª≠a l·ªói
  console.log("5. ƒê·ªÄ XU·∫§T S·ª¨A L·ªñI:");
  console.log("=" * 50);
  
  if (Math.abs(final_refund_rounded - totalFrontendRefund) > 1) {
    console.log("‚ùå V·∫§N ƒê·ªÄ: Frontend truy·ªÅn sai refund_amount!");
    console.log("‚úÖ GI·∫¢I PH√ÅP:");
    console.log("   1. Backend s·∫Ω IGNORE refund_amount t·ª´ Frontend");
    console.log("   2. Backend s·∫Ω t·ª± t√≠nh l·∫°i refund_amount d·ª±a tr√™n:");
    console.log("      - Gi√° g·ªëc t·ª´ order");
    console.log("      - Discount s·∫£n ph·∫©m t·ª´ order");
    console.log("      - Ph√¢n b·ªï order discount theo t·ª∑ l·ªá");
    console.log("      - Logic final return n·∫øu c·∫ßn");
    console.log();
    console.log("   3. Frontend ch·ªâ c·∫ßn truy·ªÅn:");
    console.log("      - product_id");
    console.log("      - quantity");
    console.log("      - KH√îNG c·∫ßn truy·ªÅn refund_amount");
  } else {
    console.log("‚úÖ D·ªØ li·ªáu Frontend ƒë√∫ng!");
  }
}

// Ch·∫°y debug
debugFrontendData().catch(console.error);

module.exports = { debugFrontendData }; 